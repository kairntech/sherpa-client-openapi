components:
  schemas:
    Ack:
      additionalProperties: false
      description: ""
      properties:
        ok:
          description: ""
          type: "boolean"
      required:
      - "ok"
      type: "object"
    Aggregation:
      additionalProperties: false
      description: ""
      properties:
        buckets:
          items:
            $ref: "#/components/schemas/Bucket"
          type: "array"
        name:
          description: ""
          type: "string"
      required:
      - "buckets"
      - "name"
      type: "object"
    AltText:
      additionalProperties: false
      description: ""
      properties:
        count:
          description: ""
          format: "int32"
          type: "integer"
        name:
          description: ""
          type: "string"
      required:
      - "count"
      - "name"
      type: "object"
    AltTextArray:
      description: ""
      items:
        $ref: "#/components/schemas/AltText"
      type: "array"
    AnnotateBinaryForm:
      additionalProperties: false
      description: ""
      properties:
        file:
          description: " binary file to be converted and annotated"
          format: "binary"
          type: "string"
        plan:
          $ref: "#/components/schemas/ConvertAnnotationPlan"
      type: "object"
    AnnotateDocumentsWithPipeline:
      additionalProperties: false
      description: ""
      properties:
        documents:
          items:
            $ref: "#/components/schemas/InputDocument"
          type: "array"
        pipeline:
          items:
            description: "Annotation pipeline to be applied"
            oneOf:
            - $ref: "#/components/schemas/WithAnnotator"
            - $ref: "#/components/schemas/WithProcessor"
            - $ref: "#/components/schemas/WithLanguageGuesser"
            - $ref: "#/components/schemas/WithSegmenter"
            - $ref: "#/components/schemas/WithConverter"
          type: "array"
      required:
      - "documents"
      - "pipeline"
      type: "object"
    AnnotateTextWithPipeline:
      additionalProperties: false
      description: ""
      properties:
        pipeline:
          items:
            description: "Annotation pipeline to be applied"
            oneOf:
            - $ref: "#/components/schemas/WithAnnotator"
            - $ref: "#/components/schemas/WithProcessor"
            - $ref: "#/components/schemas/WithLanguageGuesser"
            - $ref: "#/components/schemas/WithSegmenter"
            - $ref: "#/components/schemas/WithConverter"
          type: "array"
        text:
          description: "Text to be annotated"
          type: "string"
      required:
      - "pipeline"
      - "text"
      type: "object"
    AnnotatedDocAltText:
      additionalProperties: false
      description: "A document alternative text"
      properties:
        name:
          description: "The alternative text name"
          type: "string"
        text:
          description: "The alternative text"
          type: "string"
      required:
      - "name"
      - "text"
      type: "object"
    AnnotatedDocAnnotation:
      additionalProperties: false
      description: "A document annotation"
      properties:
        creationMode:
          description: "Creation mode"
          enum:
          - "manual"
          - "automatic"
          - "undefined"
          type: "string"
        end:
          description: "End offset in document"
          format: "int32"
          type: "integer"
        label:
          description: "Human-friendly label"
          type: "string"
        labelId:
          description: "External label identifier"
          type: "string"
        labelName:
          description: "Label name"
          type: "string"
        properties:
          description: "Additional properties"
          type: "object"
        score:
          description: "Score of the annotation"
          type: "number"
        start:
          description: "Start offset in document"
          format: "int32"
          type: "integer"
        terms:
          items:
            $ref: "#/components/schemas/AnnotationTerm"
          type: "array"
        text:
          description: "Covered text"
          type: "string"
      required:
      - "end"
      - "labelName"
      - "start"
      - "text"
      type: "object"
    AnnotatedDocCategory:
      additionalProperties: false
      description: "A document category"
      properties:
        creationMode:
          description: "Creation mode"
          enum:
          - "manual"
          - "automatic"
          - "undefined"
          type: "string"
        label:
          description: "Human-friendly label"
          type: "string"
        labelId:
          description: "External label identifier"
          type: "string"
        labelName:
          description: "Label name"
          type: "string"
        properties:
          description: "Additional properties"
          type: "object"
        score:
          description: "Score of the category"
          type: "number"
      required:
      - "labelName"
      type: "object"
    AnnotatedDocSentence:
      additionalProperties: false
      description: ""
      properties:
        categories:
          items:
            $ref: "#/components/schemas/AnnotatedDocCategory"
          type: "array"
        end:
          description: ""
          format: "int32"
          type: "integer"
        metadata:
          description: ""
          type: "object"
        start:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "end"
      - "start"
      type: "object"
    AnnotatedDocument:
      additionalProperties: false
      description: ""
      properties:
        altTexts:
          items:
            $ref: "#/components/schemas/AnnotatedDocAltText"
          type: "array"
        annotations:
          items:
            $ref: "#/components/schemas/AnnotatedDocAnnotation"
          type: "array"
        categories:
          items:
            $ref: "#/components/schemas/AnnotatedDocCategory"
          type: "array"
        identifier:
          description: "document identifier (externally provided or generated by sherpa)"
          type: "string"
        metadata:
          description: "document metadata"
          type: "object"
        sentences:
          items:
            $ref: "#/components/schemas/AnnotatedDocSentence"
          type: "array"
        text:
          description: "text of the document"
          type: "string"
        title:
          description: "document title"
          type: "string"
      required:
      - "text"
      type: "object"
    AnnotatedDocumentArray:
      description: ""
      items:
        $ref: "#/components/schemas/AnnotatedDocument"
      type: "array"
    Annotation:
      additionalProperties: false
      description: "A document annotation"
      properties:
        creationMode:
          description: "Creation mode"
          enum:
          - "manual"
          - "automatic"
          - "undefined"
          type: "string"
        documentIdentifier:
          description: "The document identifier"
          type: "string"
        end:
          description: "End offset in document"
          format: "int32"
          type: "integer"
        labelName:
          description: "The label name"
          type: "string"
        start:
          description: "Start offset in document"
          format: "int32"
          type: "integer"
        status:
          description: "Status of the annotation"
          enum:
          - "OK"
          - "KO"
          type: "string"
        text:
          description: "Covered text"
          type: "string"
      required:
      - "documentIdentifier"
      - "end"
      - "labelName"
      - "start"
      - "text"
      type: "object"
    AnnotationFacets:
      additionalProperties: false
      description: ""
      properties:
        labels:
          items:
            $ref: "#/components/schemas/LabelCount"
          type: "array"
        texts:
          items:
            $ref: "#/components/schemas/TextCount"
          type: "array"
      required:
      - "labels"
      - "texts"
      type: "object"
    AnnotationId:
      additionalProperties: false
      description: "Annotation creation response"
      properties:
        identifier:
          description: "Identifier of the new annotation"
          type: "string"
      required:
      - "identifier"
      type: "object"
    AnnotationMetrics:
      additionalProperties: false
      description: ""
      properties:
        annotationCount:
          description: ""
          format: "int32"
          type: "integer"
        annotationFacets:
          $ref: "#/components/schemas/AnnotationFacets"
        documentFacets:
          $ref: "#/components/schemas/DocumentFacets"
        documentsInDataset:
          description: ""
          format: "int32"
          type: "integer"
        segmentsInDataset:
          description: ""
          format: "int32"
          type: "integer"
        suggestionCount:
          description: ""
          format: "int32"
          type: "integer"
        suggestionFacets:
          $ref: "#/components/schemas/SuggestionFacets"
      required:
      - "annotationCount"
      - "annotationFacets"
      - "documentFacets"
      - "documentsInDataset"
      - "segmentsInDataset"
      - "suggestionCount"
      - "suggestionFacets"
      type: "object"
    AnnotationPatch:
      additionalProperties: false
      description: ""
      properties:
        status:
          description: "Status of the category"
          enum:
          - "OK"
          - "KO"
          type: "string"
      required:
      - "status"
      type: "object"
    AnnotationPlan:
      additionalProperties: false
      description: ""
      properties:
        converter:
          $ref: "#/components/schemas/Converter"
        formatter:
          $ref: "#/components/schemas/Formatter"
        pipeline:
          items:
            description: "Annotation pipeline to be applied"
            oneOf:
            - $ref: "#/components/schemas/WithAnnotator"
            - $ref: "#/components/schemas/WithProcessor"
            - $ref: "#/components/schemas/WithLanguageGuesser"
            - $ref: "#/components/schemas/WithSegmenter"
            - $ref: "#/components/schemas/WithConverter"
          type: "array"
        segmenter:
          $ref: "#/components/schemas/Segmenter"
      required:
      - "pipeline"
      type: "object"
    AnnotationStatus:
      additionalProperties: false
      description: ""
      properties: {}
      type: "object"
    AnnotationTerm:
      additionalProperties: false
      description: "A term"
      properties:
        identifier:
          description: "Annotation identifier (only in 'html version')"
          type: "string"
        lexicon:
          description: "Lexicon of the term"
          type: "string"
        preferredForm:
          description: "Preferred form of the term"
          type: "string"
        properties:
          description: "Properties of the term"
          type: "object"
        score:
          description: "Score of the term"
          format: "int32"
          type: "integer"
      required:
      - "identifier"
      - "lexicon"
      type: "object"
    Annotator:
      additionalProperties: false
      description: ""
      properties:
        engine:
          description: ""
          type: "string"
        favorite:
          description: ""
          type: "boolean"
        isDefault:
          description: ""
          type: "boolean"
        label:
          description: ""
          type: "string"
        name:
          description: ""
          type: "string"
      required:
      - "engine"
      - "label"
      - "name"
      type: "object"
    AnnotatorMultimap:
      additionalProperties:
        items:
          $ref: "#/components/schemas/Annotator"
        type: "array"
      description: ""
      type: "object"
    ApplyTo:
      additionalProperties: false
      description: ""
      properties:
        path:
          description: ""
          type: "string"
      required:
      - "path"
      type: "object"
    BearerToken:
      additionalProperties: false
      description: ""
      properties:
        access_token:
          description: ""
          type: "string"
        email:
          description: ""
          type: "string"
      required:
      - "access_token"
      - "email"
      type: "object"
    Bucket:
      additionalProperties: false
      description: ""
      properties:
        doc_count:
          description: ""
          format: "int32"
          type: "integer"
        key:
          description: ""
          type: "string"
      required:
      - "doc_count"
      - "key"
      type: "object"
    Campaign:
      additionalProperties: false
      description: ""
      properties:
        emailNotifications:
          $ref: "#/components/schemas/EmailNotifications"
        id:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        overviewMessages:
          items:
            description: ""
            oneOf:
            - $ref: "#/components/schemas/MessageId"
            - $ref: "#/components/schemas/Message"
            - $ref: "#/components/schemas/NewMessage"
          type: "array"
        sessionModes:
          items:
            $ref: "#/components/schemas/CampaignSessionMode"
          type: "array"
        sessions:
          items:
            $ref: "#/components/schemas/CampaignSession"
          type: "array"
        stopMessages:
          items:
            description: ""
            oneOf:
            - $ref: "#/components/schemas/MessageId"
            - $ref: "#/components/schemas/Message"
            - $ref: "#/components/schemas/NewMessage"
          type: "array"
        userGroups:
          items:
            $ref: "#/components/schemas/CampaignUserGroup"
          type: "array"
        userSessions:
          items:
            $ref: "#/components/schemas/CampaignUserSession"
          type: "array"
        welcomeMessages:
          items:
            description: ""
            oneOf:
            - $ref: "#/components/schemas/MessageId"
            - $ref: "#/components/schemas/Message"
            - $ref: "#/components/schemas/NewMessage"
          type: "array"
      required:
      - "id"
      - "label"
      - "overviewMessages"
      - "stopMessages"
      - "welcomeMessages"
      type: "object"
    CampaignArray:
      description: ""
      items:
        $ref: "#/components/schemas/Campaign"
      type: "array"
    CampaignId:
      additionalProperties: false
      description: ""
      properties:
        id:
          description: ""
          type: "string"
      required:
      - "id"
      type: "object"
    CampaignPatch:
      additionalProperties: false
      description: ""
      properties:
        emailNotifications:
          $ref: "#/components/schemas/EmailNotifications"
        label:
          description: ""
          type: "string"
        overviewMessages:
          items:
            description: ""
            oneOf:
            - $ref: "#/components/schemas/MessageId"
            - $ref: "#/components/schemas/Message"
            - $ref: "#/components/schemas/NewMessage"
          type: "array"
        sessionModes:
          items:
            description: ""
            oneOf:
            - $ref: "#/components/schemas/CampaignSessionMode"
            - $ref: "#/components/schemas/NewCampaignSessionMode"
          type: "array"
        sessions:
          items:
            description: ""
            oneOf:
            - $ref: "#/components/schemas/CampaignSession"
            - $ref: "#/components/schemas/NewCampaignSession"
          type: "array"
        stopMessages:
          items:
            description: ""
            oneOf:
            - $ref: "#/components/schemas/MessageId"
            - $ref: "#/components/schemas/Message"
            - $ref: "#/components/schemas/NewMessage"
          type: "array"
        userGroups:
          items:
            $ref: "#/components/schemas/CampaignUserGroup"
          type: "array"
        userSessions:
          items:
            description: ""
            oneOf:
            - $ref: "#/components/schemas/CampaignUserSession"
            - $ref: "#/components/schemas/NewCampaignUserSession"
          type: "array"
        welcomeMessages:
          items:
            description: ""
            oneOf:
            - $ref: "#/components/schemas/MessageId"
            - $ref: "#/components/schemas/Message"
            - $ref: "#/components/schemas/NewMessage"
          type: "array"
      type: "object"
    CampaignRolesChange:
      additionalProperties: false
      description: ""
      properties:
        addedRoles:
          items:
            description: ""
            type: "string"
          type: "array"
        removeCurrentFuntionalRoles:
          description: ""
          type: "boolean"
        removedRoles:
          items:
            description: ""
            type: "string"
          type: "array"
        username:
          description: ""
          type: "string"
      required:
      - "addedRoles"
      - "removeCurrentFuntionalRoles"
      - "removedRoles"
      - "username"
      type: "object"
    CampaignSession:
      additionalProperties: false
      description: ""
      properties:
        duration:
          description: ""
          format: "int32"
          type: "integer"
        id:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        reconciliationUsername:
          description: ""
          type: "string"
        splitSize:
          description: ""
          type: "number"
      required:
      - "duration"
      - "id"
      - "label"
      - "splitSize"
      type: "object"
    CampaignSessionMode:
      additionalProperties: false
      description: ""
      properties:
        id:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        openFunctionalRoles:
          items:
            description: ""
            type: "string"
          type: "array"
        startedFunctionalRoles:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "id"
      - "label"
      type: "object"
    CampaignUserGroup:
      additionalProperties: false
      description: ""
      properties:
        label:
          description: ""
          type: "string"
        users:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "label"
      - "users"
      type: "object"
    CampaignUserSession:
      additionalProperties: false
      description: ""
      properties:
        id:
          description: ""
          type: "string"
        sessionId:
          description: ""
          type: "string"
        sessionModeId:
          description: ""
          type: "string"
        state:
          description: ""
          enum:
          - "NOT_EXISTS"
          - "NEW"
          - "OPEN"
          - "STARTED"
          - "PAUSED"
          - "STOPPED"
          - "CLOSED"
          - "SAME"
          type: "string"
        username:
          description: ""
          type: "string"
      required:
      - "id"
      - "sessionId"
      - "sessionModeId"
      - "state"
      - "username"
      type: "object"
    CategoriesFacets:
      additionalProperties: false
      description: ""
      properties:
        labels:
          items:
            $ref: "#/components/schemas/LabelCount"
          type: "array"
      required:
      - "labels"
      type: "object"
    Category:
      additionalProperties: false
      description: "A document category"
      properties:
        creationMode:
          description: "Creation mode"
          enum:
          - "manual"
          - "automatic"
          - "undefined"
          type: "string"
        documentIdentifier:
          description: "identifier of the document"
          type: "string"
        labelName:
          description: "The label name"
          type: "string"
        score:
          description: "Score of the category"
          type: "number"
        status:
          description: "Status of the category"
          enum:
          - "OK"
          - "KO"
          type: "string"
      required:
      - "documentIdentifier"
      - "labelName"
      type: "object"
    CategoryAction:
      additionalProperties: false
      description: ""
      properties:
        add:
          description: "add or remove"
          type: "boolean"
        labelName:
          description: "category label name"
          type: "string"
      required:
      - "add"
      - "labelName"
      type: "object"
    CategoryId:
      additionalProperties: false
      description: ""
      properties:
        identifier:
          description: ""
          type: "string"
      required:
      - "identifier"
      type: "object"
    CategoryMetrics:
      additionalProperties: false
      description: ""
      properties:
        categoriesCount:
          description: ""
          format: "int32"
          type: "integer"
        categoriesFacets:
          $ref: "#/components/schemas/CategoriesFacets"
        documentFacets:
          $ref: "#/components/schemas/DocumentFacets"
        documentsInDataset:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "categoriesCount"
      - "categoriesFacets"
      - "documentFacets"
      - "documentsInDataset"
      type: "object"
    CategoryPatch:
      additionalProperties: false
      description: ""
      properties:
        status:
          description: "Status of the category"
          enum:
          - "OK"
          - "KO"
          type: "string"
      required:
      - "status"
      type: "object"
    ClassificationConfig:
      additionalProperties: false
      description: ""
      properties:
        exclusive_classes:
          description: ""
          type: "boolean"
      required:
      - "exclusive_classes"
      type: "object"
    ClassificationOptions:
      additionalProperties: false
      description: ""
      properties:
        exclusive_classes:
          default: true
          description: ""
          type: "boolean"
      type: "object"
    ConfigPatchOptions:
      additionalProperties: false
      description: ""
      properties:
        classification:
          $ref: "#/components/schemas/ClassificationOptions"
        collaborativeAnnotation:
          description: ""
          type: "boolean"
        imageFilename:
          description: ""
          type: "string"
        imageId:
          description: ""
          type: "string"
        imageUrl:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        metafacets:
          items:
            description: ""
            type: "string"
          type: "array"
      type: "object"
    ConvertAnnotationPlan:
      additionalProperties: false
      description: ""
      properties:
        converter:
          $ref: "#/components/schemas/Converter"
        pipeline:
          items:
            description: "Annotation pipeline to be applied"
            oneOf:
            - $ref: "#/components/schemas/WithAnnotator"
            - $ref: "#/components/schemas/WithProcessor"
            - $ref: "#/components/schemas/WithLanguageGuesser"
            - $ref: "#/components/schemas/WithSegmenter"
            - $ref: "#/components/schemas/WithConverter"
          type: "array"
        segmenter:
          $ref: "#/components/schemas/Segmenter"
      required:
      - "pipeline"
      type: "object"
    ConvertFormatAnnotationPlan:
      additionalProperties: false
      description: ""
      properties:
        converter:
          $ref: "#/components/schemas/Converter"
        formatter:
          $ref: "#/components/schemas/Formatter"
        pipeline:
          items:
            description: "Annotation pipeline to be applied"
            oneOf:
            - $ref: "#/components/schemas/WithAnnotator"
            - $ref: "#/components/schemas/WithProcessor"
            - $ref: "#/components/schemas/WithLanguageGuesser"
            - $ref: "#/components/schemas/WithSegmenter"
            - $ref: "#/components/schemas/WithConverter"
          type: "array"
        segmenter:
          $ref: "#/components/schemas/Segmenter"
      required:
      - "formatter"
      - "pipeline"
      type: "object"
    Converter:
      additionalProperties: false
      description: ""
      properties:
        name:
          description: "Name of the converter (e.g. tika)"
          type: "string"
        parameters:
          description: "Optional conversion parameters"
          type: "object"
      required:
      - "name"
      type: "object"
    CorpusMetrics:
      additionalProperties: false
      description: ""
      properties:
        corpusSize:
          description: ""
          format: "int32"
          type: "integer"
        documentCount:
          description: ""
          format: "int32"
          type: "integer"
        documentFacets:
          $ref: "#/components/schemas/DocumentFacets"
        segmentCount:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "corpusSize"
      - "documentCount"
      - "documentFacets"
      - "segmentCount"
      type: "object"
    CreatedByCount:
      additionalProperties: false
      description: ""
      properties:
        count:
          description: ""
          format: "int32"
          type: "integer"
        createdBy:
          description: ""
          type: "string"
      required:
      - "count"
      - "createdBy"
      type: "object"
    CreatedByCountArray:
      description: ""
      items:
        $ref: "#/components/schemas/CreatedByCount"
      type: "array"
    CreationMode:
      additionalProperties: false
      description: ""
      properties: {}
      type: "object"
    Credentials:
      additionalProperties: false
      description: ""
      properties:
        email:
          description: ""
          type: "string"
        password:
          description: ""
          type: "string"
      required:
      - "email"
      - "password"
      type: "object"
    DeleteGroupResult:
      additionalProperties: false
      description: ""
      properties:
        removedProjects:
          description: ""
          format: "int32"
          type: "integer"
        removedUsers:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "removedProjects"
      - "removedUsers"
      type: "object"
    DeleteManyResponse:
      additionalProperties: false
      description: ""
      properties:
        details:
          items:
            $ref: "#/components/schemas/ItemCount"
          type: "array"
        job:
          $ref: "#/components/schemas/SherpaJobBean"
        removed:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "removed"
      type: "object"
    DeleteResponse:
      additionalProperties: false
      description: ""
      properties:
        removeJob:
          $ref: "#/components/schemas/SherpaJobBean"
        removedCount:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "removedCount"
      type: "object"
    DependsOn:
      additionalProperties: false
      description: ""
      properties:
        auto:
          description: ""
          type: "boolean"
        groups:
          items:
            description: ""
            type: "string"
          type: "array"
        hint:
          description: ""
          type: "string"
        steps:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "auto"
      - "groups"
      - "hint"
      - "steps"
      type: "object"
    DocAltText:
      additionalProperties: false
      description: "A document alternative text"
      properties:
        createdBy:
          description: "User having created the category"
          type: "string"
        createdDate:
          description: "Creation date"
          type: "string"
        modifiedDate:
          description: "Last modification date"
          type: "string"
        name:
          description: "The alternative text name"
          type: "string"
        text:
          description: "The alternative text"
          type: "string"
      required:
      - "name"
      - "text"
      type: "object"
    DocAnnotation:
      additionalProperties: false
      description: "A document annotation"
      properties:
        createdBy:
          description: "User having created the annotation"
          type: "string"
        createdDate:
          description: "Creation date"
          type: "string"
        creationMode:
          description: "Creation mode"
          enum:
          - "manual"
          - "automatic"
          - "undefined"
          type: "string"
        end:
          description: "End offset in document"
          format: "int32"
          type: "integer"
        identifier:
          description: "Annotation identifier (only in 'html version')"
          type: "string"
        labelName:
          description: "The label name"
          type: "string"
        modifiedDate:
          description: "Last modification date"
          type: "string"
        properties:
          description: "Additional properties"
          type: "object"
        start:
          description: "Start offset in document"
          format: "int32"
          type: "integer"
        status:
          description: "Status of the annotation"
          enum:
          - "OK"
          - "KO"
          type: "string"
        terms:
          items:
            $ref: "#/components/schemas/AnnotationTerm"
          type: "array"
        text:
          description: "Covered text"
          type: "string"
      required:
      - "end"
      - "labelName"
      - "start"
      - "text"
      type: "object"
    DocCategory:
      additionalProperties: false
      description: "A document category"
      properties:
        createdBy:
          description: "User having created the category"
          type: "string"
        createdDate:
          description: "Creation date"
          type: "string"
        creationMode:
          description: "Creation mode"
          enum:
          - "manual"
          - "automatic"
          - "undefined"
          type: "string"
        identifier:
          description: "Category identifier"
          type: "string"
        labelName:
          description: "The label name"
          type: "string"
        modifiedDate:
          description: "Last modification date"
          type: "string"
        properties:
          description: "Additional properties"
          type: "object"
        score:
          description: "Score of the category"
          type: "number"
        status:
          description: "Status of the category"
          enum:
          - "OK"
          - "KO"
          type: "string"
      required:
      - "identifier"
      - "labelName"
      type: "object"
    DocSentence:
      additionalProperties: false
      description: ""
      properties:
        categories:
          items:
            $ref: "#/components/schemas/DocCategory"
          type: "array"
        end:
          description: ""
          format: "int32"
          type: "integer"
        metadata:
          description: ""
          type: "object"
        start:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "end"
      - "start"
      type: "object"
    Document:
      additionalProperties: false
      description: ""
      properties:
        altTexts:
          items:
            $ref: "#/components/schemas/DocAltText"
          type: "array"
        annotations:
          items:
            $ref: "#/components/schemas/DocAnnotation"
          type: "array"
        categories:
          items:
            $ref: "#/components/schemas/DocCategory"
          type: "array"
        createdBy:
          description: "User having created the document"
          type: "string"
        createdDate:
          description: "Creation date"
          type: "string"
        identifier:
          description: "document identifier (externally provided or generated by sherpa)"
          type: "string"
        metadata:
          description: "document metadata"
          type: "object"
        modifiedDate:
          description: "Last modification date"
          type: "string"
        sentences:
          items:
            $ref: "#/components/schemas/DocSentence"
          type: "array"
        text:
          description: "text of the document"
          type: "string"
        title:
          description: "title of the document"
          type: "string"
      required:
      - "identifier"
      - "text"
      - "title"
      type: "object"
    DocumentArray:
      description: ""
      items:
        $ref: "#/components/schemas/Document"
      type: "array"
    DocumentFacets:
      additionalProperties: false
      description: ""
      properties:
        facets:
          items:
            $ref: "#/components/schemas/MetadataCount"
          type: "array"
        metadata:
          description: ""
          type: "string"
      required:
      - "facets"
      - "metadata"
      type: "object"
    DocumentHit:
      additionalProperties: false
      description: ""
      properties:
        _id:
          description: ""
          type: "string"
        document:
          $ref: "#/components/schemas/Document"
        score:
          description: ""
          type: "number"
      required:
      - "_id"
      - "document"
      - "score"
      type: "object"
    DocumentHits:
      additionalProperties: false
      description: ""
      properties:
        aggregations:
          items:
            $ref: "#/components/schemas/Aggregation"
          type: "array"
        hits:
          items:
            $ref: "#/components/schemas/DocumentHit"
          type: "array"
        max_score:
          description: ""
          type: "number"
        total:
          $ref: "#/components/schemas/SearchTotal"
      required:
      - "hits"
      - "total"
      type: "object"
    EmailNotifications:
      additionalProperties: false
      description: ""
      properties:
        enabled:
          description: ""
          type: "boolean"
        notifiedUsers:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "enabled"
      type: "object"
    EngineConfig:
      additionalProperties: false
      description: ""
      properties:
        name:
          description: ""
          type: "string"
        type:
          description: ""
          type: "string"
      required:
      - "name"
      - "type"
      type: "object"
    EngineConfigImportSummary:
      additionalProperties: false
      description: ""
      properties:
        configs:
          items:
            description: "engine configs that will be imported"
            type: "string"
          type: "array"
        ignored:
          items:
            default: "0"
            description: "engine configs that will not be imported (already exist)"
            type: "string"
          type: "array"
        models:
          default: 0
          description: "number of models that will be imported"
          format: "int32"
          type: "integer"
        pendingJob:
          $ref: "#/components/schemas/SherpaJobBean"
      type: "object"
    EngineName:
      additionalProperties: false
      description: ""
      properties:
        name:
          description: ""
          type: "string"
      required:
      - "name"
      type: "object"
    Error:
      properties:
        code:
          format: "int32"
          type: "integer"
        message:
          type: "string"
      required:
      - "code"
      - "message"
    Experiment:
      additionalProperties: false
      description: ""
      properties:
        classes:
          items:
            description: ""
            type: "string"
          type: "array"
        duration:
          description: ""
          format: "int64"
          type: "integer"
        emailNotification:
          description: ""
          type: "boolean"
        engine:
          description: ""
          type: "string"
        favorite:
          description: ""
          type: "boolean"
        label:
          description: ""
          type: "string"
        models:
          description: ""
          format: "int32"
          type: "integer"
        name:
          description: ""
          type: "string"
        parameters:
          description: ""
          type: "object"
        quality:
          description: ""
          format: "int32"
          type: "integer"
        report:
          $ref: "#/components/schemas/Report"
        running:
          description: ""
          type: "boolean"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
        timestamp:
          description: ""
          format: "int64"
          type: "integer"
        uptodate:
          description: ""
          type: "boolean"
      required:
      - "duration"
      - "engine"
      - "label"
      - "models"
      - "name"
      - "parameters"
      - "quality"
      - "running"
      - "timestamp"
      - "uptodate"
      type: "object"
    ExperimentArray:
      description: ""
      items:
        $ref: "#/components/schemas/Experiment"
      type: "array"
    ExperimentPatch:
      additionalProperties: false
      description: ""
      properties:
        emailNotification:
          description: ""
          type: "boolean"
        favorite:
          description: ""
          type: "boolean"
        label:
          description: ""
          type: "string"
        parameters:
          description: ""
          type: "object"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
      type: "object"
    ExternalDatabases:
      additionalProperties: false
      description: ""
      properties:
        databases:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "databases"
      type: "object"
    ExternalResources:
      additionalProperties: false
      description: ""
      properties:
        databases:
          items:
            description: ""
            type: "string"
          type: "array"
        indexes:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "databases"
      - "indexes"
      type: "object"
    FormatBinaryForm:
      additionalProperties: false
      description: ""
      properties:
        file:
          description: " binary file to be converted and annotated"
          format: "binary"
          type: "string"
        plan:
          $ref: "#/components/schemas/ConvertFormatAnnotationPlan"
      type: "object"
    FormatDocumentsWithMany:
      additionalProperties: false
      description: ""
      properties:
        documents:
          items:
            $ref: "#/components/schemas/InputDocument"
          type: "array"
        formatter:
          $ref: "#/components/schemas/Formatter"
        pipeline:
          items:
            description: "Annotation pipeline to be applied"
            oneOf:
            - $ref: "#/components/schemas/WithAnnotator"
            - $ref: "#/components/schemas/WithProcessor"
            - $ref: "#/components/schemas/WithLanguageGuesser"
            - $ref: "#/components/schemas/WithSegmenter"
            - $ref: "#/components/schemas/WithConverter"
          type: "array"
      required:
      - "documents"
      - "formatter"
      - "pipeline"
      type: "object"
    FormatTextWithMany:
      additionalProperties: false
      description: ""
      properties:
        formatter:
          $ref: "#/components/schemas/Formatter"
        pipeline:
          items:
            description: "Annotation pipeline to be applied"
            oneOf:
            - $ref: "#/components/schemas/WithAnnotator"
            - $ref: "#/components/schemas/WithProcessor"
            - $ref: "#/components/schemas/WithLanguageGuesser"
            - $ref: "#/components/schemas/WithSegmenter"
            - $ref: "#/components/schemas/WithConverter"
          type: "array"
        text:
          description: ""
          type: "string"
      required:
      - "formatter"
      - "pipeline"
      - "text"
      type: "object"
    Formatter:
      additionalProperties: false
      description: ""
      properties:
        name:
          description: "Name of the formatter (e.g. tabular)"
          type: "string"
        parameters:
          description: "Optional formatting parameters"
          type: "object"
      required:
      - "name"
      type: "object"
    Gazetteer:
      additionalProperties: false
      description: ""
      properties:
        duration:
          description: ""
          format: "int64"
          type: "integer"
        emailNotification:
          description: ""
          type: "boolean"
        engine:
          description: ""
          type: "string"
        favorite:
          description: ""
          type: "boolean"
        label:
          description: ""
          type: "string"
        models:
          description: ""
          format: "int32"
          type: "integer"
        name:
          description: ""
          type: "string"
        parameters:
          description: ""
          type: "object"
        running:
          description: ""
          type: "boolean"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
        timestamp:
          description: ""
          format: "int64"
          type: "integer"
        uptodate:
          description: ""
          type: "boolean"
      required:
      - "duration"
      - "engine"
      - "label"
      - "models"
      - "name"
      - "parameters"
      - "running"
      - "timestamp"
      - "uptodate"
      type: "object"
    GazetteerArray:
      description: ""
      items:
        $ref: "#/components/schemas/Gazetteer"
      type: "array"
    GazetteerPatch:
      additionalProperties: false
      description: ""
      properties:
        emailNotification:
          description: ""
          type: "boolean"
        favorite:
          description: ""
          type: "boolean"
        label:
          description: ""
          type: "string"
        parameters:
          description: ""
          type: "object"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
      type: "object"
    GeneratedLabelHint:
      additionalProperties: false
      description: ""
      properties:
        labelHint:
          description: ""
          type: "string"
      required:
      - "labelHint"
      type: "object"
    GroupDesc:
      additionalProperties: false
      description: ""
      properties:
        attachedRoles:
          items:
            description: ""
            type: "string"
          type: "array"
        createdAt:
          description: ""
          type: "string"
        createdBy:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        maxUsers:
          description: ""
          format: "int32"
          type: "integer"
        modifiedAt:
          description: ""
          type: "string"
        modifiedBy:
          description: ""
          type: "string"
        name:
          description: ""
          type: "string"
      required:
      - "label"
      - "maxUsers"
      - "name"
      type: "object"
    GroupDescArray:
      description: ""
      items:
        $ref: "#/components/schemas/GroupDesc"
      type: "array"
    GroupName:
      additionalProperties: false
      description: ""
      properties:
        name:
          description: ""
          type: "string"
      required:
      - "name"
      type: "object"
    GroupPatch:
      additionalProperties: false
      description: ""
      properties:
        attachedRoles:
          items:
            description: ""
            type: "string"
          type: "array"
        label:
          description: ""
          type: "string"
        maxUsers:
          description: ""
          format: "int32"
          type: "integer"
      type: "object"
    GroupShare:
      additionalProperties: false
      description: ""
      properties:
        canRevoke:
          description: ""
          type: "boolean"
        groupName:
          description: ""
          type: "string"
        mode:
          $ref: "#/components/schemas/ShareMode"
      required:
      - "canRevoke"
      - "groupName"
      - "mode"
      type: "object"
    GroupShareArray:
      description: ""
      items:
        $ref: "#/components/schemas/GroupShare"
      type: "array"
    HttpServiceMetadata:
      additionalProperties: false
      description: ""
      properties:
        annotators:
          description: ""
          type: "string"
        api:
          description: ""
          type: "string"
        compatibility:
          description: ""
          type: "string"
        converters:
          description: ""
          type: "string"
        engine:
          description: ""
          type: "string"
        extensions:
          description: ""
          type: "string"
        formatters:
          description: ""
          type: "string"
        functions:
          description: ""
          type: "string"
        languageGuessers:
          description: ""
          type: "string"
        languages:
          description: ""
          type: "string"
        natures:
          description: ""
          type: "string"
        operations:
          description: ""
          type: "object"
        processors:
          description: ""
          type: "string"
        segmenters:
          description: ""
          type: "string"
        termImporters:
          description: ""
          type: "string"
        trigger:
          description: ""
          type: "string"
        version:
          description: ""
          type: "string"
      required:
      - "api"
      - "compatibility"
      - "version"
      type: "object"
    HttpServiceRecord:
      additionalProperties: false
      description: ""
      properties:
        host:
          description: ""
          type: "string"
        metadata:
          $ref: "#/components/schemas/HttpServiceMetadata"
        name:
          description: ""
          type: "string"
        port:
          description: ""
          format: "int32"
          type: "integer"
        ssl:
          description: ""
          type: "boolean"
      required:
      - "host"
      - "metadata"
      - "name"
      - "port"
      type: "object"
    HttpServiceRecordArray:
      description: ""
      items:
        $ref: "#/components/schemas/HttpServiceRecord"
      type: "array"
    InputDocument:
      additionalProperties: false
      description: ""
      properties:
        altTexts:
          items:
            $ref: "#/components/schemas/DocAltText"
          type: "array"
        annotations:
          items:
            $ref: "#/components/schemas/DocAnnotation"
          type: "array"
        categories:
          items:
            $ref: "#/components/schemas/DocCategory"
          type: "array"
        identifier:
          description: "document identifier"
          type: "string"
        metadata:
          description: "document metadata"
          type: "object"
        sentences:
          items:
            $ref: "#/components/schemas/DocSentence"
          type: "array"
        text:
          description: "text of the document"
          type: "string"
        title:
          description: "title of the document"
          type: "string"
      required:
      - "text"
      type: "object"
    InputDocumentArray:
      description: ""
      items:
        $ref: "#/components/schemas/InputDocument"
      type: "array"
    InputLabel:
      additionalProperties: false
      description: ""
      properties:
        label:
          description: ""
          type: "string"
      required:
      - "label"
      type: "object"
    ItemCount:
      additionalProperties: false
      description: ""
      properties:
        count:
          description: ""
          format: "int32"
          type: "integer"
        name:
          description: ""
          type: "string"
      required:
      - "count"
      - "name"
      type: "object"
    ItemRef:
      additionalProperties: false
      description: ""
      properties:
        name:
          description: ""
          type: "string"
      required:
      - "name"
      type: "object"
    ItemRefArray:
      description: ""
      items:
        $ref: "#/components/schemas/ItemRef"
      type: "array"
    JobStatus:
      additionalProperties: false
      description: ""
      properties: {}
      type: "object"
    JobType:
      additionalProperties: false
      description: ""
      properties: {}
      type: "object"
    Label:
      additionalProperties: false
      description: ""
      properties:
        color:
          description: ""
          type: "string"
        count:
          description: ""
          format: "int32"
          type: "integer"
        guideline:
          description: ""
          type: "string"
        identifier:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        labelSetName:
          description: ""
          type: "string"
        name:
          description: ""
          type: "string"
      required:
      - "color"
      - "label"
      - "name"
      type: "object"
    LabelArray:
      description: ""
      items:
        $ref: "#/components/schemas/Label"
      type: "array"
    LabelCount:
      additionalProperties: false
      description: ""
      properties:
        _id:
          description: ""
          type: "string"
        count:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "_id"
      - "count"
      type: "object"
    LabelNames:
      additionalProperties: false
      description: ""
      properties:
        names:
          items:
            description: ""
            type: "string"
          type: "array"
      type: "object"
    LabelSet:
      additionalProperties: false
      description: ""
      properties:
        createdAt:
          description: ""
          type: "string"
        createdBy:
          description: ""
          type: "string"
        exclusiveClasses:
          default: false
          description: ""
          type: "boolean"
        guideline:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        modifiedAt:
          description: ""
          type: "string"
        name:
          description: ""
          type: "string"
        nature:
          description: ""
          type: "string"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
      type: "object"
    LabelSetArray:
      description: ""
      items:
        $ref: "#/components/schemas/LabelSet"
      type: "array"
    LabelSetUpdate:
      additionalProperties: false
      description: ""
      properties:
        exclusiveClasses:
          description: ""
          type: "boolean"
        guideline:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        nature:
          description: ""
          type: "string"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
      type: "object"
    LabelUpdate:
      additionalProperties: false
      description: ""
      properties:
        color:
          description: ""
          type: "string"
        guideline:
          description: ""
          type: "string"
        identifier:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        labelSetName:
          description: ""
          type: "string"
      type: "object"
    Lexicon:
      additionalProperties: false
      description: ""
      properties:
        color:
          description: ""
          type: "string"
        createdAt:
          description: ""
          type: "string"
        createdBy:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        manualEditionAllowed:
          description: "(unstable)"
          type: "boolean"
        modifiedAt:
          description: ""
          type: "string"
        modifiedBy:
          description: ""
          type: "string"
        name:
          description: ""
          type: "string"
        terms:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "color"
      - "label"
      - "manualEditionAllowed"
      - "name"
      type: "object"
    LexiconArray:
      description: ""
      items:
        $ref: "#/components/schemas/Lexicon"
      type: "array"
    LexiconUpdate:
      additionalProperties: false
      description: ""
      properties:
        color:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
      type: "object"
    LocalizedMessage:
      additionalProperties: false
      description: ""
      properties:
        body:
          description: ""
          type: "string"
        title:
          description: ""
          type: "string"
      required:
      - "body"
      - "title"
      type: "object"
    Message:
      additionalProperties: false
      description: ""
      properties:
        group:
          description: ""
          type: "string"
        id:
          description: ""
          type: "string"
        index:
          description: ""
          format: "int32"
          type: "integer"
        localized:
          additionalProperties:
            $ref: "#/components/schemas/LocalizedMessage"
          type: "object"
        mark:
          $ref: "#/components/schemas/MessageMark"
      required:
      - "id"
      - "localized"
      type: "object"
    MessageArray:
      description: ""
      items:
        $ref: "#/components/schemas/Message"
      type: "array"
    MessageId:
      additionalProperties: false
      description: ""
      properties:
        id:
          description: ""
          type: "string"
      required:
      - "id"
      type: "object"
    MessageMark:
      additionalProperties: false
      description: ""
      properties:
        read:
          description: ""
          type: "boolean"
      required:
      - "read"
      type: "object"
    MessagePatch:
      additionalProperties: false
      description: ""
      properties:
        group:
          description: ""
          type: "string"
        index:
          description: ""
          format: "int32"
          type: "integer"
        localized:
          additionalProperties:
            $ref: "#/components/schemas/LocalizedMessage"
          type: "object"
        scope:
          description: ""
          type: "string"
      required:
      - "localized"
      type: "object"
    MetadataCount:
      additionalProperties: false
      description: ""
      properties:
        _id:
          description: ""
          type: "string"
        documentCount:
          description: ""
          format: "int32"
          type: "integer"
        segmentCount:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "_id"
      - "documentCount"
      - "segmentCount"
      type: "object"
    MetadataDefinition:
      additionalProperties: false
      description: ""
      properties:
        metadata:
          items:
            $ref: "#/components/schemas/MetadataDefinitionEntry"
          type: "array"
      required:
      - "metadata"
      type: "object"
    MetadataDefinitionArray:
      description: ""
      items:
        $ref: "#/components/schemas/MetadataDefinition"
      type: "array"
    MetadataDefinitionEntry:
      additionalProperties: false
      description: ""
      properties:
        distinctMetadataValues:
          items:
            description: ""
            type: "string"
          type: "array"
        isEditable:
          description: ""
          type: "boolean"
        isMultiple:
          description: ""
          type: "boolean"
        metadataName:
          description: ""
          type: "string"
      required:
      - "distinctMetadataValues"
      - "isEditable"
      - "isMultiple"
      - "metadataName"
      type: "object"
    ModelMetrics:
      additionalProperties: false
      description: ""
      properties:
        classes:
          items:
            description: ""
            type: "string"
          type: "array"
        config:
          $ref: "#/components/schemas/EngineConfig"
        engine:
          description: ""
          type: "string"
        lang:
          description: ""
          type: "string"
        name:
          description: ""
          type: "string"
        options:
          description: ""
          type: "object"
        quality:
          description: ""
          type: "number"
        report:
          $ref: "#/components/schemas/Report"
        status:
          description: ""
          type: "string"
        timestamp:
          description: ""
          format: "int64"
          type: "integer"
        timestamp_end:
          description: ""
          format: "int64"
          type: "integer"
      required:
      - "classes"
      - "config"
      - "engine"
      - "lang"
      - "name"
      - "options"
      - "quality"
      - "report"
      - "status"
      - "timestamp"
      - "timestamp_end"
      type: "object"
    ModelsMetrics:
      additionalProperties: false
      description: ""
      properties:
        best:
          $ref: "#/components/schemas/ModelMetrics"
        history:
          items:
            $ref: "#/components/schemas/ModelMetrics"
          type: "array"
        last:
          $ref: "#/components/schemas/ModelMetrics"
      required:
      - "history"
      type: "object"
    NamedAnnotationPlan:
      additionalProperties: false
      description: ""
      properties:
        createdAt:
          description: ""
          type: "string"
        createdBy:
          description: ""
          type: "string"
        favorite:
          description: ""
          type: "boolean"
        label:
          description: ""
          type: "string"
        modifiedAt:
          description: ""
          type: "string"
        modifiedBy:
          description: ""
          type: "string"
        name:
          description: ""
          type: "string"
        parameters:
          $ref: "#/components/schemas/AnnotationPlan"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "label"
      - "name"
      - "parameters"
      type: "object"
    NamedAnnotationPlanArray:
      description: ""
      items:
        $ref: "#/components/schemas/NamedAnnotationPlan"
      type: "array"
    NewCampaign:
      additionalProperties: false
      description: ""
      properties:
        emailNotifications:
          $ref: "#/components/schemas/EmailNotifications"
        label:
          description: ""
          type: "string"
        overviewMessages:
          items:
            $ref: "#/components/schemas/NewMessage"
          type: "array"
        sessionModes:
          items:
            $ref: "#/components/schemas/NewCampaignSessionMode"
          type: "array"
        sessions:
          items:
            $ref: "#/components/schemas/NewCampaignSession"
          type: "array"
        stopMessages:
          items:
            $ref: "#/components/schemas/NewMessage"
          type: "array"
        userGroups:
          items:
            $ref: "#/components/schemas/CampaignUserGroup"
          type: "array"
        welcomeMessages:
          items:
            $ref: "#/components/schemas/NewMessage"
          type: "array"
      required:
      - "label"
      type: "object"
    NewCampaignSession:
      additionalProperties: false
      description: ""
      properties:
        duration:
          description: ""
          format: "int32"
          type: "integer"
        label:
          description: ""
          type: "string"
        reconciliationUsername:
          description: ""
          type: "string"
        splitSize:
          description: ""
          type: "number"
      required:
      - "duration"
      - "label"
      - "splitSize"
      type: "object"
    NewCampaignSessionMode:
      additionalProperties: false
      description: ""
      properties:
        label:
          description: ""
          type: "string"
        openFunctionalRoles:
          items:
            description: ""
            type: "string"
          type: "array"
        startedFunctionalRoles:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "label"
      type: "object"
    NewCampaignUserSession:
      additionalProperties: false
      description: ""
      properties:
        sessionId:
          description: ""
          type: "string"
        sessionModeId:
          description: ""
          type: "string"
        username:
          description: ""
          type: "string"
      required:
      - "sessionId"
      - "sessionModeId"
      - "username"
      type: "object"
    NewExperiment:
      additionalProperties: false
      description: ""
      properties:
        emailNotification:
          description: ""
          type: "boolean"
        engine:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        parameters:
          description: ""
          type: "object"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "engine"
      - "label"
      - "parameters"
      type: "object"
    NewGazetteer:
      additionalProperties: false
      description: ""
      properties:
        emailNotification:
          description: ""
          type: "boolean"
        engine:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        parameters:
          description: ""
          type: "object"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "engine"
      - "label"
      - "parameters"
      type: "object"
    NewGroupDesc:
      additionalProperties: false
      description: ""
      properties:
        attachedRoles:
          items:
            description: ""
            type: "string"
          type: "array"
        label:
          description: ""
          type: "string"
        maxUsers:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "label"
      type: "object"
    NewMessage:
      additionalProperties: false
      description: ""
      properties:
        group:
          description: ""
          type: "string"
        index:
          description: ""
          format: "int32"
          type: "integer"
        localized:
          additionalProperties:
            $ref: "#/components/schemas/LocalizedMessage"
          type: "object"
        scope:
          description: ""
          type: "string"
      required:
      - "localized"
      type: "object"
    NewNamedAnnotationPlan:
      additionalProperties: false
      description: ""
      properties:
        label:
          description: ""
          type: "string"
        parameters:
          $ref: "#/components/schemas/AnnotationPlan"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "label"
      - "parameters"
      type: "object"
    NewRole:
      additionalProperties: false
      description: ""
      properties:
        label:
          description: ""
          type: "string"
        permissions:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "label"
      - "permissions"
      type: "object"
    NewSuggester:
      additionalProperties: false
      description: ""
      properties:
        engine:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        parameters:
          description: ""
          type: "object"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "engine"
      - "label"
      - "parameters"
      type: "object"
    NewUser:
      additionalProperties: false
      description: ""
      properties:
        email:
          description: ""
          type: "string"
        password:
          description: ""
          type: "string"
        permissions:
          items:
            description: ""
            type: "string"
          type: "array"
        roles:
          items:
            description: ""
            type: "string"
          type: "array"
        username:
          description: ""
          type: "string"
      required:
      - "password"
      - "permissions"
      - "roles"
      - "username"
      type: "object"
    NextStep:
      additionalProperties: false
      description: ""
      properties:
        hint:
          description: ""
          type: "string"
        id:
          description: ""
          type: "string"
      required:
      - "hint"
      - "id"
      type: "object"
    OperationCount:
      additionalProperties: false
      description: "Annotation creation response"
      properties:
        count:
          description: "Number of elements affected by the operation"
          format: "int64"
          type: "integer"
        operation:
          description: "Name of the operation"
          type: "string"
        unit:
          description: "Element unit of the operation"
          type: "string"
      required:
      - "count"
      - "operation"
      - "unit"
      type: "object"
    PartialLabel:
      additionalProperties: false
      description: ""
      properties:
        color:
          description: ""
          type: "string"
        guideline:
          description: ""
          type: "string"
        identifier:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        labelSetName:
          description: ""
          type: "string"
        name:
          description: ""
          type: "string"
      type: "object"
    PartialLexicon:
      additionalProperties: false
      description: ""
      properties:
        color:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        name:
          description: ""
          type: "string"
      required:
      - "label"
      type: "object"
    PlanPatch:
      additionalProperties: false
      description: ""
      properties:
        favorite:
          description: ""
          type: "boolean"
        label:
          description: ""
          type: "string"
        parameters:
          $ref: "#/components/schemas/AnnotationPlan"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
      type: "object"
    ProjectAnnotators:
      additionalProperties: false
      description: ""
      properties:
        gazetteer:
          items:
            $ref: "#/components/schemas/Annotator"
          type: "array"
        learner:
          items:
            $ref: "#/components/schemas/Annotator"
          type: "array"
        plan:
          items:
            $ref: "#/components/schemas/Annotator"
          type: "array"
        suggester:
          items:
            $ref: "#/components/schemas/Annotator"
          type: "array"
      required:
      - "gazetteer"
      - "learner"
      - "plan"
      - "suggester"
      type: "object"
    ProjectBean:
      additionalProperties: false
      description: ""
      properties:
        algorithms:
          items:
            description: ""
            type: "string"
          type: "array"
        annotations:
          description: ""
          format: "int32"
          type: "integer"
        categories:
          description: ""
          format: "int32"
          type: "integer"
        classification:
          $ref: "#/components/schemas/ClassificationConfig"
        components:
          items:
            description: ""
            type: "string"
          type: "array"
        createdBy:
          description: ""
          type: "string"
        createdDate:
          description: ""
          type: "string"
        description:
          description: ""
          type: "string"
        devPatches:
          items:
            description: ""
            type: "string"
          type: "array"
        documents:
          description: ""
          format: "int32"
          type: "integer"
        engines:
          items:
            description: ""
            type: "string"
          type: "array"
        groupName:
          description: ""
          type: "string"
        hasSplit:
          description: ""
          type: "boolean"
        image:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        lang:
          description: ""
          type: "string"
        metafacets:
          items:
            description: ""
          type: "array"
        name:
          description: ""
          type: "string"
        nature:
          description: ""
          type: "string"
        openSession:
          $ref: "#/components/schemas/ProjectOpenSession"
        owner:
          description: ""
          type: "string"
        private:
          description: ""
          type: "boolean"
        readOnly:
          description: ""
          type: "boolean"
        segments:
          description: ""
          format: "int32"
          type: "integer"
        shared:
          description: ""
          type: "boolean"
        terms:
          description: ""
          format: "int32"
          type: "integer"
        version:
          description: ""
          type: "string"
      required:
      - "description"
      - "image"
      - "label"
      - "lang"
      - "name"
      type: "object"
    ProjectBeanArray:
      description: ""
      items:
        $ref: "#/components/schemas/ProjectBean"
      type: "array"
    ProjectConfigCreation:
      additionalProperties: false
      description: ""
      properties:
        collaborativeAnnotation:
          description: ""
          type: "boolean"
        description:
          description: ""
          type: "string"
        imageFilename:
          description: ""
          type: "string"
        imageId:
          description: ""
          type: "string"
        imageUrl:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        lang:
          default: "en"
          description: ""
          type: "string"
        metafacets:
          description: ""
          type: "string"
        name:
          description: ""
          type: "string"
        nature:
          default: "sequence_labelling"
          description: ""
          type: "string"
        properties:
          description: ""
          type: "object"
      type: "object"
    ProjectOpenSession:
      additionalProperties: false
      description: ""
      properties:
        campaignId:
          description: ""
          type: "string"
        duration:
          description: ""
          format: "int32"
          type: "integer"
        id:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        remainingDuration:
          description: ""
          format: "int32"
          type: "integer"
        sessionId:
          description: ""
          type: "string"
        state:
          description: ""
          enum:
          - "NOT_EXISTS"
          - "NEW"
          - "OPEN"
          - "STARTED"
          - "PAUSED"
          - "STOPPED"
          - "CLOSED"
          - "SAME"
          type: "string"
      required:
      - "campaignId"
      - "duration"
      - "label"
      - "remainingDuration"
      - "sessionId"
      - "state"
      type: "object"
    ProjectProperty:
      additionalProperties: false
      description: ""
      properties:
        name:
          default: "value"
          description: ""
          type: "string"
      type: "object"
    ProjectStatus:
      additionalProperties: false
      description: ""
      properties:
        pendingJob:
          $ref: "#/components/schemas/SherpaJobBean"
        projectName:
          description: ""
          type: "string"
        status:
          description: ""
          type: "string"
      required:
      - "projectName"
      - "status"
      type: "object"
    ProjectStatusArray:
      description: ""
      items:
        $ref: "#/components/schemas/ProjectStatus"
      type: "array"
    ProjectsAnnotators:
      additionalProperties: false
      description: ""
      properties:
        annotators:
          $ref: "#/components/schemas/ProjectAnnotators"
        projectName:
          description: ""
          type: "string"
      required:
      - "annotators"
      - "projectName"
      type: "object"
    ProjectsAnnotatorsArray:
      description: ""
      items:
        $ref: "#/components/schemas/ProjectsAnnotators"
      type: "array"
    QualityFigures:
      additionalProperties: false
      description: ""
      properties:
        f1:
          description: ""
          type: "number"
        precision:
          description: ""
          type: "number"
        recall:
          description: ""
          type: "number"
        roc_auc:
          description: ""
          type: "number"
        support:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "f1"
      - "precision"
      - "recall"
      - "support"
      type: "object"
    Relation:
      additionalProperties: false
      description: ""
      properties: {}
      type: "object"
    Report:
      additionalProperties: false
      description: ""
      properties:
        classes:
          additionalProperties:
            $ref: "#/components/schemas/QualityFigures"
          type: "object"
        config:
          $ref: "#/components/schemas/EngineConfig"
        macroAvg:
          $ref: "#/components/schemas/QualityFigures"
        microAvg:
          $ref: "#/components/schemas/QualityFigures"
        samplesAvg:
          $ref: "#/components/schemas/QualityFigures"
        weightedAvg:
          $ref: "#/components/schemas/QualityFigures"
      required:
      - "classes"
      - "microAvg"
      type: "object"
    RoleDesc:
      additionalProperties: false
      description: ""
      properties:
        createdAt:
          description: ""
          type: "string"
        createdBy:
          description: ""
          type: "string"
        groupName:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        modifiedAt:
          description: ""
          type: "string"
        modifiedBy:
          description: ""
          type: "string"
        permissions:
          items:
            description: ""
            type: "string"
          type: "array"
        predefined:
          description: ""
          type: "boolean"
        rolename:
          description: ""
          type: "string"
        type:
          description: ""
          type: "string"
      required:
      - "label"
      - "permissions"
      - "rolename"
      - "type"
      type: "object"
    RoleDescArray:
      description: ""
      items:
        $ref: "#/components/schemas/RoleDesc"
      type: "array"
    RoleUpdate:
      additionalProperties: false
      description: ""
      properties:
        label:
          description: ""
          type: "string"
        permissions:
          items:
            description: ""
            type: "string"
          type: "array"
      type: "object"
    SearchTotal:
      additionalProperties: false
      description: ""
      properties:
        relation:
          description: ""
          enum:
          - "eq"
          - "gte"
          type: "string"
        value:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "relation"
      - "value"
      type: "object"
    Segment:
      additionalProperties: false
      description: ""
      properties:
        annotations:
          items:
            $ref: "#/components/schemas/DocAnnotation"
          type: "array"
        categories:
          items:
            $ref: "#/components/schemas/DocCategory"
          type: "array"
        createdBy:
          description: "User having created the segment"
          type: "string"
        createdDate:
          description: "Creation date"
          type: "string"
        documentIdentifier:
          description: ""
          type: "string"
        documentTitle:
          description: ""
          type: "string"
        end:
          description: ""
          format: "int32"
          type: "integer"
        identifier:
          description: ""
          type: "string"
        metadata:
          description: ""
          type: "object"
        modifiedDate:
          description: "Last modification date"
          type: "string"
        shift:
          description: ""
          format: "int32"
          type: "integer"
        start:
          description: ""
          format: "int32"
          type: "integer"
        text:
          description: ""
          type: "string"
      required:
      - "documentIdentifier"
      - "documentTitle"
      - "end"
      - "identifier"
      - "start"
      - "text"
      type: "object"
    SegmentArray:
      description: ""
      items:
        $ref: "#/components/schemas/Segment"
      type: "array"
    SegmentContext:
      additionalProperties: false
      description: ""
      properties:
        merged:
          $ref: "#/components/schemas/Segment"
        segments:
          items:
            $ref: "#/components/schemas/Segment"
          type: "array"
        size:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "size"
      type: "object"
    SegmentContexts:
      additionalProperties: false
      description: ""
      properties:
        after:
          $ref: "#/components/schemas/SegmentContext"
        before:
          $ref: "#/components/schemas/SegmentContext"
      required:
      - "after"
      - "before"
      type: "object"
    SegmentHit:
      additionalProperties: false
      description: ""
      properties:
        _id:
          description: ""
          type: "string"
        score:
          description: ""
          type: "number"
        segment:
          $ref: "#/components/schemas/Segment"
      required:
      - "_id"
      - "score"
      - "segment"
      type: "object"
    SegmentHits:
      additionalProperties: false
      description: ""
      properties:
        aggregations:
          items:
            $ref: "#/components/schemas/Aggregation"
          type: "array"
        hits:
          items:
            $ref: "#/components/schemas/SegmentHit"
          type: "array"
        max_score:
          description: ""
          type: "number"
        total:
          $ref: "#/components/schemas/SearchTotal"
      required:
      - "hits"
      - "total"
      type: "object"
    Segmenter:
      additionalProperties: false
      description: ""
      properties:
        name:
          description: "Name of the segmenter (e.g. blingfire) or name of the conversion\
            \ plan"
          type: "string"
        parameters:
          description: "Optional conversion parameters"
          type: "object"
        projectName:
          description: "If conversion plan, name of the project containing the plan"
          type: "string"
      required:
      - "name"
      type: "object"
    SessionCorpusPermissionChange:
      additionalProperties: false
      description: ""
      properties:
        add:
          description: ""
          type: "boolean"
        projectName:
          description: ""
          type: "string"
        sessionLabel:
          description: ""
          type: "string"
        usernames:
          items:
            description: ""
          type: "array"
      required:
      - "add"
      - "projectName"
      - "sessionLabel"
      - "usernames"
      type: "object"
    ShareMode:
      additionalProperties: false
      description: ""
      properties:
        read:
          description: ""
          type: "boolean"
        write:
          description: ""
          type: "boolean"
      required:
      - "read"
      - "write"
      type: "object"
    SherpaJobBean:
      additionalProperties: false
      description: ""
      properties:
        completedAt:
          description: ""
          format: "int64"
          type: "integer"
        createdAt:
          description: ""
          format: "int64"
          type: "integer"
        createdBy:
          description: ""
          type: "string"
        currentStepCount:
          description: ""
          format: "int64"
          type: "integer"
        description:
          description: ""
          type: "string"
        id:
          description: ""
          type: "string"
        project:
          description: ""
          type: "string"
        projectLabel:
          description: ""
          type: "string"
        status:
          description: ""
          enum:
          - "STARTED"
          - "PAUSED"
          - "CANCELLED"
          - "FAILED"
          - "COMPLETED"
          type: "string"
        statusMessage:
          description: ""
          type: "string"
        totalStepCount:
          description: ""
          format: "int64"
          type: "integer"
        type:
          description: ""
          enum:
          - "DOC_IMPORT"
          - "EXPERIMENT_TRAINING"
          - "DELETE_DOCS"
          - "CORPUS_ANNOTATE"
          - "TRAIN_AND_SUGGEST"
          - "ADD_METADATA"
          - "UNSPECIFIED"
          - "PROJECT_INDEXING"
          - "PROJECTS_INDEXING"
          - "PROJECT_RESTORATION"
          - "DELETE_LABELS"
          - "PROCESS_CANDIDATES"
          - "SYNCHRONIZE_TERMS"
          - "TERM_IMPORT"
          - "SPLIT_CORPUS"
          - "BACKUP_USER_SESSION"
          - "ADD_CATEGORY"
          - "PROJECT_SEGMENTATION"
          type: "string"
        uploadIds:
          items:
            description: ""
            type: "string"
          type: "array"
      required:
      - "createdAt"
      - "createdBy"
      - "currentStepCount"
      - "description"
      - "id"
      - "project"
      - "projectLabel"
      - "status"
      - "totalStepCount"
      - "type"
      - "uploadIds"
      type: "object"
    SherpaJobBeanArray:
      description: ""
      items:
        $ref: "#/components/schemas/SherpaJobBean"
      type: "array"
    SimpleMetadata:
      additionalProperties: false
      description: ""
      properties:
        name:
          description: "name of the metadata"
          type: "string"
        value:
          description: "value of the metadata: leave empty or null to remove the metadata"
          type: "string"
      required:
      - "name"
      - "value"
      type: "object"
    Suggester:
      additionalProperties: false
      description: ""
      properties:
        duration:
          description: ""
          format: "int64"
          type: "integer"
        engine:
          description: ""
          type: "string"
        label:
          description: ""
          type: "string"
        models:
          description: ""
          format: "int32"
          type: "integer"
        name:
          description: ""
          type: "string"
        parameters:
          description: ""
          type: "object"
        quality:
          description: ""
          format: "int32"
          type: "integer"
        running:
          description: ""
          type: "boolean"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
        timestamp:
          description: ""
          format: "int64"
          type: "integer"
        uptodate:
          description: ""
          type: "boolean"
      required:
      - "duration"
      - "engine"
      - "label"
      - "models"
      - "name"
      - "parameters"
      - "quality"
      - "running"
      - "timestamp"
      - "uptodate"
      type: "object"
    SuggesterArray:
      description: ""
      items:
        $ref: "#/components/schemas/Suggester"
      type: "array"
    SuggesterPatch:
      additionalProperties: false
      description: ""
      properties:
        label:
          description: ""
          type: "string"
        parameters:
          description: ""
          type: "object"
        tags:
          items:
            description: ""
            type: "string"
          type: "array"
      type: "object"
    SuggestionFacets:
      additionalProperties: false
      description: ""
      properties:
        labels:
          items:
            $ref: "#/components/schemas/LabelCount"
          type: "array"
        texts:
          items:
            $ref: "#/components/schemas/TextCount"
          type: "array"
      required:
      - "labels"
      - "texts"
      type: "object"
    TermHit:
      additionalProperties: false
      description: ""
      properties:
        score:
          description: ""
          type: "number"
        term:
          description: ""
          type: "object"
      required:
      - "score"
      - "term"
      type: "object"
    TermHits:
      additionalProperties: false
      description: ""
      properties:
        hits:
          items:
            $ref: "#/components/schemas/TermHit"
          type: "array"
        max_score:
          description: ""
          type: "number"
        total:
          $ref: "#/components/schemas/SearchTotal"
      required:
      - "hits"
      - "total"
      type: "object"
    TermIdentifier:
      additionalProperties: false
      description: ""
      properties:
        identifier:
          description: ""
          type: "string"
      required:
      - "identifier"
      type: "object"
    TermImport:
      additionalProperties: false
      description: ""
      properties:
        files:
          items:
            $ref: "#/components/schemas/UploadedFile"
          type: "array"
        importer:
          $ref: "#/components/schemas/TermImporterSpec"
      required:
      - "files"
      - "importer"
      type: "object"
    TermImporterSpec:
      additionalProperties: false
      description: ""
      properties:
        format:
          description: ""
          type: "string"
        parameters:
          description: ""
          type: "object"
      required:
      - "format"
      - "parameters"
      type: "object"
    TextCount:
      additionalProperties: false
      description: ""
      properties:
        _id:
          description: ""
          type: "string"
        count:
          description: ""
          format: "int32"
          type: "integer"
      required:
      - "_id"
      - "count"
      type: "object"
    UploadedFile:
      additionalProperties: false
      description: ""
      properties:
        contentType:
          description: ""
          type: "string"
        filename:
          description: ""
          type: "string"
        id:
          description: ""
          type: "string"
      required:
      - "filename"
      - "id"
      type: "object"
    UploadedFileArray:
      description: ""
      items:
        $ref: "#/components/schemas/UploadedFile"
      type: "array"
    UploadedFileInfo:
      additionalProperties: false
      description: ""
      properties:
        id:
          description: ""
          type: "string"
      required:
      - "id"
      type: "object"
    UserPermissionsUpdate:
      additionalProperties: false
      description: ""
      properties:
        disabled:
          description: ""
          type: "boolean"
        permissions:
          items:
            description: ""
            type: "string"
          type: "array"
        roles:
          items:
            description: ""
            type: "string"
          type: "array"
      type: "object"
    UserProfile:
      additionalProperties: false
      description: ""
      properties:
        email:
          description: ""
          type: "string"
        profilename:
          description: ""
          type: "string"
        username:
          description: ""
          type: "string"
      required:
      - "profilename"
      - "username"
      type: "object"
    UserProfileUpdate:
      additionalProperties: false
      description: ""
      properties:
        email:
          description: ""
          type: "string"
        password:
          description: ""
          type: "string"
        profilename:
          description: ""
          type: "string"
      type: "object"
    UserResponse:
      additionalProperties: false
      description: ""
      properties:
        createdAt:
          description: ""
          type: "string"
        createdBy:
          description: ""
          type: "string"
        defaultGroup:
          description: ""
          type: "string"
        disabled:
          description: ""
          type: "boolean"
        email:
          description: ""
          type: "string"
        groups:
          items:
            description: ""
            type: "string"
          type: "array"
        permissions:
          items:
            description: ""
            type: "string"
          type: "array"
        profilename:
          description: ""
          type: "string"
        roles:
          items:
            description: ""
            type: "string"
          type: "array"
        username:
          description: ""
          type: "string"
      required:
      - "profilename"
      - "username"
      type: "object"
    UserResponseArray:
      description: ""
      items:
        $ref: "#/components/schemas/UserResponse"
      type: "array"
    UserSessionState:
      additionalProperties: false
      description: ""
      properties:
        $enum$name:
          description: ""
          type: "boolean"
      required:
      - "$enum$name"
      type: "object"
    WithAnnotator:
      additionalProperties: false
      description: ""
      properties:
        annotator:
          description: ""
          type: "string"
        applyTo:
          $ref: "#/components/schemas/ApplyTo"
        condition:
          description: ""
          type: "object"
        dependsOn:
          $ref: "#/components/schemas/DependsOn"
        disabled:
          description: ""
          type: "boolean"
        group:
          description: ""
          type: "string"
        id:
          description: ""
          type: "string"
        nextSteps:
          items:
            $ref: "#/components/schemas/NextStep"
          type: "array"
        parameters:
          description: ""
          type: "object"
        projectName:
          description: ""
          type: "string"
      required:
      - "annotator"
      type: "object"
    WithConverter:
      additionalProperties: false
      description: ""
      properties:
        applyTo:
          $ref: "#/components/schemas/ApplyTo"
        condition:
          description: ""
          type: "object"
        converter:
          description: ""
          type: "string"
        dependsOn:
          $ref: "#/components/schemas/DependsOn"
        disabled:
          description: ""
          type: "boolean"
        group:
          description: ""
          type: "string"
        id:
          description: ""
          type: "string"
        nextSteps:
          items:
            $ref: "#/components/schemas/NextStep"
          type: "array"
        parameters:
          description: ""
          type: "object"
        projectName:
          description: ""
          type: "string"
      required:
      - "converter"
      type: "object"
    WithLanguageGuesser:
      additionalProperties: false
      description: ""
      properties:
        applyTo:
          $ref: "#/components/schemas/ApplyTo"
        condition:
          description: ""
          type: "object"
        dependsOn:
          $ref: "#/components/schemas/DependsOn"
        disabled:
          description: ""
          type: "boolean"
        group:
          description: ""
          type: "string"
        id:
          description: ""
          type: "string"
        languageGuesser:
          description: ""
          type: "string"
        nextSteps:
          items:
            $ref: "#/components/schemas/NextStep"
          type: "array"
        parameters:
          description: ""
          type: "object"
        projectName:
          description: ""
          type: "string"
      required:
      - "languageGuesser"
      type: "object"
    WithProcessor:
      additionalProperties: false
      description: ""
      properties:
        condition:
          description: ""
          type: "object"
        dependsOn:
          $ref: "#/components/schemas/DependsOn"
        disabled:
          description: ""
          type: "boolean"
        group:
          description: ""
          type: "string"
        id:
          description: ""
          type: "string"
        nextSteps:
          items:
            $ref: "#/components/schemas/NextStep"
          type: "array"
        parameters:
          description: ""
          type: "object"
        processor:
          description: ""
          type: "string"
      required:
      - "processor"
      type: "object"
    WithSegmenter:
      additionalProperties: false
      description: ""
      properties:
        applyTo:
          $ref: "#/components/schemas/ApplyTo"
        condition:
          description: ""
          type: "object"
        dependsOn:
          $ref: "#/components/schemas/DependsOn"
        disabled:
          description: ""
          type: "boolean"
        group:
          description: ""
          type: "string"
        id:
          description: ""
          type: "string"
        nextSteps:
          items:
            $ref: "#/components/schemas/NextStep"
          type: "array"
        parameters:
          description: ""
          type: "object"
        projectName:
          description: ""
          type: "string"
        segmenter:
          description: ""
          type: "string"
      required:
      - "segmenter"
      type: "object"
  securitySchemes:
    basicAuth:
      scheme: "basic"
      type: "http"
    bearerAuth:
      bearerFormat: "JWT"
      scheme: "bearer"
      type: "http"
info:
  license:
    name: "MIT"
  title: "Sherpa API documentation"
  version: "1.0.0"
openapi: "3.0.0"
paths:
  /_external_resources:
    delete:
      operationId: "deleteExternalResources"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExternalResources"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalResources"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete external indexes and databases (response contains deletion\
        \ failures)"
      tags:
      - "projects"
    get:
      operationId: "getExternalResources"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "ignoreIndexes"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "ignoreDatabases"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalResources"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "List non-sherpa indexes and databases"
      tags:
      - "projects"
  /annotate/_annotate_binary:
    post:
      operationId: "annotateBinaryWithPlan"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "if a project name is given, default language guesser, segmenters\
          \ of the project will be used"
        explode: true
        in: "query"
        name: "projectContext"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AnnotateBinaryForm"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocumentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a binary document with a pipeline"
      tags:
      - "annotate"
  /annotate/_annotate_documents:
    post:
      operationId: "annotateDocumentsWithPlan"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "if a project name is given, default language guesser, segmenters\
          \ of the project will be used"
        explode: true
        in: "query"
        name: "projectContext"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotateDocumentsWithPipeline"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocumentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate documents with a pipeline"
      tags:
      - "annotate"
  /annotate/_annotate_format_binary:
    post:
      operationId: "annotateFormatBinaryWithPlan"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "if a project name is given, default language guesser, segmenters\
          \ of the project will be used"
        explode: true
        in: "query"
        name: "projectContext"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormatBinaryForm"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                format: "binary"
                type: "string"
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
            application/xml:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a binary document with a pipeline and return a formatted\
        \ result"
      tags:
      - "annotate"
  /annotate/_annotate_format_documents:
    post:
      operationId: "annotateFormatDocumentsWithPlan"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "if a project name is given, default language guesser, segmenters\
          \ of the project will be used"
        explode: true
        in: "query"
        name: "projectContext"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FormatDocumentsWithMany"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: "binary"
                type: "string"
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
            application/xml:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate documents with a pipeline and return formatted results (generally\
        \ in a zip)"
      tags:
      - "annotate"
  /annotate/_annotate_format_text:
    post:
      operationId: "annotateFormatTextWithPlan"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "if a project name is given, default language guesser, segmenters\
          \ of the project will be used"
        explode: true
        in: "query"
        name: "projectContext"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FormatTextWithMany"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: "binary"
                type: "string"
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
            application/xml:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a text with a pipeline and return a formatted result"
      tags:
      - "annotate"
  /annotate/_annotate_text:
    post:
      operationId: "annotateTextWithPlan"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "if a project name is given, default language guesser, segmenters\
          \ of the project will be used"
        explode: true
        in: "query"
        name: "projectContext"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotateTextWithPipeline"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocument"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a text with a pipeline"
      tags:
      - "annotate"
  /annotate/_format_binary:
    post:
      deprecated: true
      operationId: "formatBinary"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormatBinaryForm"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                format: "binary"
                type: "string"
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
            application/xml:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a binary document with multiple annotators and return a formatted\
        \ result (replaced with _annotate_format_binary)"
      tags:
      - "annotate"
  /annotate/projects/{projectName}/_annotate:
    post:
      operationId: "annotateTextWithProject"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          text/plain:
            schema:
              type: "string"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocument"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Annotate text with the default annotator of the project"
      tags:
      - "annotate"
  /annotate/projects/{projectName}/_annotate_binary:
    post:
      operationId: "annotateBinaryWithProject"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocumentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a binary document with the default annotator of the project"
      tags:
      - "annotate"
  /annotate/projects/{projectName}/annotators/{annotator}/_annotate:
    post:
      operationId: "annotateTextWithProjectAnnotator"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "annotator"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          text/plain:
            schema:
              type: "string"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocument"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Annotate text with the a project annotator"
      tags:
      - "annotate"
  /annotate/projects/{projectName}/annotators/{annotator}/_annotate_binary:
    post:
      operationId: "annotateBinaryWithProjectAnnotator"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "annotator"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocumentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a binary document with a project annotator"
      tags:
      - "annotate"
  /annotate/projects/{projectName}/annotators/{annotator}/_annotate_documents:
    post:
      operationId: "annotateDocumentsWithProjectAnnotator"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "annotator"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputDocumentArray"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocumentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Annotate documents with a project annotator"
      tags:
      - "annotate"
  /annotate/projects/{projectName}/annotators/{annotator}/_annotate_format_binary:
    post:
      operationId: "annotateFormatBinaryWithProjectAnnotator"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "annotator"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                format: "binary"
                type: "string"
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
            application/xml:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a binary document and return a formatted result"
      tags:
      - "annotate"
  /annotate/projects/{projectName}/annotators/{annotator}/_annotate_format_documents:
    post:
      operationId: "annotateFormatDocumentsWithProjectAnnotator"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "annotator"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputDocumentArray"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: "binary"
                type: "string"
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
            application/xml:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate documents and return formatted results in a zip"
      tags:
      - "annotate"
  /annotate/projects/{projectName}/annotators/{annotator}/_annotate_format_text:
    post:
      operationId: "annotateFormatTextWithProjectAnnotator"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "annotator"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          text/plain:
            schema:
              type: "string"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: "binary"
                type: "string"
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
            application/xml:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a text and return a formatted result"
      tags:
      - "annotate"
  /app_state:
    get:
      operationId: "getAppState"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: "object"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "return the app cached state (internal use only)"
      tags:
      - "projects"
  /auth/login:
    post:
      operationId: "requestJwtToken"
      parameters:
      - description: "regular expression of project names: will reduce the size of\
          \ the token"
        explode: true
        in: "query"
        name: "projectFilter"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: "project access mode (*_annotate*-like endpoints only require\
          \ a read access mode): will reduce the size of the token"
        explode: true
        in: "query"
        name: "projectAccessMode"
        required: false
        schema:
          enum:
          - "read"
          - "write"
          - "chmod"
          type: "string"
        style: "form"
      - description: "set true if you only plan to use *_annotate*-like endpoints\
          \ endpoints: will reduce the size of the token"
        explode: true
        in: "query"
        name: "annotateOnly"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Only login (don't get a token)"
        explode: true
        in: "query"
        name: "loginOnly"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Returns a token without permissions (to be used as an API key)"
        explode: true
        in: "query"
        name: "noPermissions"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Duration of the token (e.g. \"1 day\" or \"3 hours\" (available\
          \ units are: seconds, minutes, hours and days)"
        explode: true
        in: "query"
        name: "duration"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BearerToken"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Request a bearer token"
      tags:
      - "authentication"
  /auth/logout:
    post:
      operationId: "userSignOut"
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Logout"
      tags:
      - "authentication"
  /groups:
    get:
      operationId: "getGroups"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDescArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get users' groups"
      tags:
      - "groups"
    post:
      operationId: "addGroup"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGroupDesc"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupName"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Add a users' group"
      tags:
      - "groups"
  /groups/{groupName}:
    delete:
      operationId: "deleteGroup"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "groupName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "set to true to delete projects and users"
        explode: true
        in: "query"
        name: "cascade"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteGroupResult"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete users' group"
      tags:
      - "groups"
    get:
      operationId: "getGroup"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "groupName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDesc"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a users' group"
      tags:
      - "groups"
    patch:
      operationId: "patchGroup"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "groupName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/GroupPatch"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Update a users' group"
      tags:
      - "groups"
  /jobs:
    get:
      operationId: "getAllJobs"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "statusFilter"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBeanArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get jobs of all projects and global jobs"
      tags:
      - "jobs"
  /jobs/{job_id}:
    delete:
      operationId: "cancelGlobalJob"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "job_id"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "cancel global job"
      tags:
      - "jobs"
    get:
      operationId: "getGlobalJob"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "job_id"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get global job information"
      tags:
      - "jobs"
  /permissions:
    get:
      operationId: "getPermissions"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: "string"
                type: "array"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get available permissions"
      tags:
      - "roles"
  /projects:
    get:
      operationId: "getProjects"
      parameters:
      - description: "True to compute project metrics (such as number of document)\
          \ on each project"
        explode: true
        in: "query"
        name: "computeMetrics"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "True to compute owners and groups of the project"
        explode: true
        in: "query"
        name: "computeOwners"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "True to compute engines and algorithms used in the project"
        explode: true
        in: "query"
        name: "computeEngines"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "groupName"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "username"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectBeanArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get projects"
      tags:
      - "projects"
    post:
      operationId: "createProject"
      parameters:
      - description: "users' group of the project (leave empty if you only belong\
          \ to one group)"
        explode: true
        in: "query"
        name: "groupName"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectConfigCreation"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectStatus"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "create an empty project"
      tags:
      - "projects"
  /projects/_deploy:
    post:
      operationId: "deployProject"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectStatus"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "deploy an already existing project"
      tags:
      - "projects"
  /projects/_enroll_databases:
    post:
      operationId: "enrollDatabases"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "deploy"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExternalDatabases"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalDatabases"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "enroll provided databases as project databases (response contains\
        \ enrollment failures)"
      tags:
      - "projects"
  /projects/_import:
    post:
      operationId: "createProjectFromArchive"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "groupName"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "reuseProjectName"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Name of the project to create. If empty then the original name\
          \ from the archive will be used instead"
        explode: true
        in: "query"
        name: "projectName"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "projectLabel"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "create a project from an archive"
      tags:
      - "projects"
  /projects/_import_models:
    post:
      operationId: "maybeCreateProjectsAndImportModelsFromArchive"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "groupName"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "reuseProjectName"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Name of the project to create. If empty then the original name\
          \ from the archive will be used instead"
        explode: true
        in: "query"
        name: "projectName"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "projectLabel"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectStatusArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "import models (and create projects if required)"
      tags:
      - "projects"
  /projects/_load:
    post:
      operationId: "createProjectFromUploadedArchive"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "groupName"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "reuseProjectName"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Name of the project to create. If empty then the original name\
          \ from the archive will be used instead"
        explode: true
        in: "query"
        name: "projectName"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "projectLabel"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadedFile"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "create a project from an already uploaded archive"
      tags:
      - "projects"
  /projects/_reindex:
    post:
      operationId: "reindexProjects"
      parameters:
      - description: "wait before returning (warning: best effort only!)"
        explode: true
        in: "query"
        name: "wait"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "reindex all projects"
      tags:
      - "projects"
  /projects/_start_tour:
    post:
      operationId: "createTourProject"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectStatus"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "create a specific tour project for the current user"
      tags:
      - "projects"
  /projects/_stop_tour:
    post:
      operationId: "deleteTourProject"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectStatus"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "stop and remove the tour for the current user"
      tags:
      - "projects"
  /projects/_undeploy:
    post:
      operationId: "undeployProject"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "undeploy a running project"
      tags:
      - "projects"
  /projects/annotators_by_type:
    get:
      operationId: "getAllAnnotatorsByType"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectsAnnotatorsArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "List available annotators by type for each projects"
      tags:
      - "projects"
  /projects/{projectName}:
    delete:
      operationId: "deleteProject"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "delete a project"
      tags:
      - "projects"
  /projects/{projectName}/_annotate:
    post:
      deprecated: true
      operationId: "deprecatedAnnotateText"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          text/plain:
            schema:
              type: "string"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocument"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Annotate text with the default annotator of the project (replaced\
        \ with /annotate/projects/{projectName}/_annotate)"
      tags:
      - "annotate"
  /projects/{projectName}/_chown:
    post:
      operationId: "changeProjectOwnership"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "username"
        required: true
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "groupName"
        required: true
        schema:
          type: "string"
        style: "form"
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Change the ownership of the project (user and group)"
      tags:
      - "shares"
  /projects/{projectName}/_export:
    post:
      operationId: "exportProject"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "set to false to exclude models from the export (experiment definition\
          \ are still exported)"
        explode: true
        in: "query"
        name: "includeModels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "export the whole project"
      tags:
      - "projects"
  /projects/{projectName}/_export_models:
    post:
      operationId: "exportModels"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "coma-separated list of experiment names"
        explode: true
        in: "query"
        name: "experiments"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: "only export models of favorite experiments (ignored when 'experiments'\
          \ parameter is provided)"
        explode: true
        in: "query"
        name: "favorite"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "export models of the project"
      tags:
      - "projects"
  /projects/{projectName}/_flush:
    post:
      operationId: "flushIndices"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "indices"
        required: false
        schema:
          default: "*"
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "timeoutMillis"
        required: false
        schema:
          default: 1500
          format: "int32"
          type: "integer"
        style: "form"
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "flush search indices of the project"
      tags:
      - "projects"
  /projects/{projectName}/_generateFacets:
    post:
      operationId: "autoDiscoverOnCorpus"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "supported mode are 'PRESERVE', 'APPEND' or 'OVERWRITE'"
        explode: true
        in: "query"
        name: "mode"
        required: true
        schema:
          type: "string"
        style: "form"
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Try to generate meaningful metadata facets based on the current project\
        \ corpus"
      tags:
      - "projects"
  /projects/{projectName}/_import_models:
    post:
      operationId: "importModels"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EngineConfigImportSummary"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "import models"
      tags:
      - "projects"
  /projects/{projectName}/_info:
    get:
      operationId: "getProjectInfo"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "True to compute project metrics (such as number of document)\
          \ on each project"
        explode: true
        in: "query"
        name: "computeMetrics"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "computeOwner"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "computeEngines"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get project information"
      tags:
      - "projects"
  /projects/{projectName}/_load_image:
    post:
      operationId: "launchProjectRestorationFromImage"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "archiveName"
        required: true
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "restore a project from a known image"
      tags:
      - "projects"
  /projects/{projectName}/_load_models:
    post:
      operationId: "importUploadedModels"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadedFileArray"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EngineConfigImportSummary"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "import models already uploaded on the server"
      tags:
      - "projects"
  /projects/{projectName}/_reindex:
    post:
      operationId: "launchProjectReindexing"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "wait before returning (warning: best effort only!)"
        explode: true
        in: "query"
        name: "wait"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "reindex the project"
      tags:
      - "projects"
  /projects/{projectName}/_restore:
    post:
      operationId: "launchProjectRestorationFromBackup"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "restore a project from backup"
      tags:
      - "projects"
  /projects/{projectName}/_split_corpus:
    post:
      operationId: "computeTrainTestSplit"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "testSize"
        required: false
        schema:
          default: 0.2
          type: "number"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "incremental"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "split corpus in train and test sets"
      tags:
      - "projects"
  /projects/{projectName}/alt_texts:
    get:
      operationId: "getAltTexts"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AltTextArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get alternative document texts"
      tags:
      - "alt-texts"
  /projects/{projectName}/alt_texts/_delete:
    post:
      operationId: "deleteAltTextsByName"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "all"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "withDetails"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRefArray"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteManyResponse"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Remove some or all alternative document texts"
      tags:
      - "alt-texts"
  /projects/{projectName}/annotationMetrics:
    get:
      operationId: "getAnnotationMetrics"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "facet"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationMetrics"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get some metrics on annotations"
      tags:
      - "metrics"
  /projects/{projectName}/annotations:
    post:
      operationId: "createAnnotation"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Annotation"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationId"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Add an annotation into the dataset"
      tags:
      - "annotations"
  /projects/{projectName}/annotations/_clear:
    post:
      operationId: "clearAnnotations"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "list of label name to consider (or all if left empty)"
        explode: true
        in: "query"
        name: "labels"
        required: false
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "list of 'createdyBy' to consider (or all if left empty)"
        explode: true
        in: "query"
        name: "createdBy"
        required: false
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationCount"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete annotations from the corpus"
      tags:
      - "annotations"
  /projects/{projectName}/annotations/_count:
    post:
      operationId: "countAnnotations"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "list of label name to consider (or all if left empty)"
        explode: true
        in: "query"
        name: "labels"
        required: false
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "list of 'createdyBy' to consider (or all if left empty)"
        explode: true
        in: "query"
        name: "createdBy"
        required: false
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationCount"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "count annotations in the corpus"
      tags:
      - "annotations"
  /projects/{projectName}/annotations/_count_creators:
    post:
      operationId: "annotationCreatorsCount"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedByCountArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get annotations count per creators"
      tags:
      - "annotations"
  /projects/{projectName}/annotations/{annotationId}:
    delete:
      operationId: "deleteAnnotation"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "String identifier of the annotation"
        explode: false
        in: "path"
        name: "annotationId"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete an annotation"
      tags:
      - "annotations"
    patch:
      operationId: "updateAnnotation"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "identifier of the annotation to update"
        explode: false
        in: "path"
        name: "annotationId"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/AnnotationPatch"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Partially update an annotation"
      tags:
      - "annotations"
  /projects/{projectName}/annotators/{annotator}/_annotate:
    post:
      deprecated: true
      operationId: "deprecatedAnnotateTextWith"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "annotator"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          text/plain:
            schema:
              type: "string"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocument"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Annotate text with the given annotator (replaced with /annotate/projects/{projectName}/annotators/{annotator}/_annotate)"
      tags:
      - "annotate"
  /projects/{projectName}/annotators/{annotator}/_annotate_corpus:
    post:
      operationId: "annotateCorpusWith"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "annotator"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "annotatorProject"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "overwrite"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "emailNotification"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Annotate the corpus with the given annotator"
      tags:
      - "annotate"
  /projects/{projectName}/annotators/{annotator}/_annotate_documents:
    post:
      deprecated: true
      operationId: "deprecatedAnnotateDocumentsWith"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "annotator"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputDocumentArray"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocumentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Annotate documents with the given annotator (replaced with /annotate/projects/{projectName}/annotators/{annotator}/_annotate_documents)"
      tags:
      - "annotate"
  /projects/{projectName}/annotators_by_type:
    get:
      operationId: "getAnnotatorsByType"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "useCache"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatorMultimap"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "List annotators by type"
      tags:
      - "annotators"
  /projects/{projectName}/campaigns:
    get:
      operationId: "getCampaigns"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineMessages"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineUserSessionEvents"
        required: false
        schema:
          default: "none"
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get annotation campaigns of the project"
      tags:
      - "campaigns"
    post:
      operationId: "createCampaign"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCampaign"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignId"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create a campaign"
      tags:
      - "campaigns"
  /projects/{projectName}/campaigns/{campaignId}:
    delete:
      operationId: "deleteCampaign"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "campaignId"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "delete campaign"
      tags:
      - "campaigns"
    get:
      operationId: "getCampaign"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "campaignId"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineMessages"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineUserSessionEvents"
        required: false
        schema:
          default: "none"
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Campaign"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get campaign"
      tags:
      - "campaigns"
    patch:
      operationId: "updateCampaign"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "campaignId"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "allowImplicitUserSessionDeletion"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/CampaignPatch"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Partially update a campaign"
      tags:
      - "campaigns"
  /projects/{projectName}/campaigns/{campaignId}/_export_user_session:
    post:
      operationId: "exportUserSession"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "campaignId"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "userSessionId"
        required: true
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "sessionLabel"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "username"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/zip:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "export a user session"
      tags:
      - "campaigns"
  /projects/{projectName}/campaigns/{campaignId}/_split_corpus:
    post:
      operationId: "splitCampaignCorpus"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "campaignId"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "targetCreatedBy"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Split corpus according to session definitions"
      tags:
      - "campaigns"
  /projects/{projectName}/campaigns/{campaignId}/_user_session_action:
    post:
      operationId: "userSessionAction"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "campaignId"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "userSessionId"
        required: true
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "action"
        required: true
        schema:
          enum:
          - "create"
          - "open"
          - "start"
          - "pause"
          - "stop"
          - "close"
          - "add_extra_time"
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "actionValue"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Perform an action on a user session"
      tags:
      - "campaigns"
  /projects/{projectName}/categories:
    post:
      operationId: "createDocumentCategory"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryId"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create a document category"
      tags:
      - "categories"
  /projects/{projectName}/categories/_clear:
    post:
      operationId: "deleteCategories"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "list of label name to consider (or all if left empty)"
        explode: true
        in: "query"
        name: "labels"
        required: false
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "list of 'createdyBy' to consider (or all if left empty)"
        explode: true
        in: "query"
        name: "createdBy"
        required: false
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationCount"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Remove categories from the corpus"
      tags:
      - "categories"
  /projects/{projectName}/categories/_count:
    post:
      operationId: "countCategories"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "list of label name to consider (or all if left empty)"
        explode: true
        in: "query"
        name: "labels"
        required: false
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "list of 'createdyBy' to consider (or all if left empty)"
        explode: true
        in: "query"
        name: "createdBy"
        required: false
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationCount"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Count categories in the corpus"
      tags:
      - "categories"
  /projects/{projectName}/categories/_count_creators:
    post:
      operationId: "categoryCreatorsCount"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedByCountArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get categories count per creators"
      tags:
      - "categories"
  /projects/{projectName}/categories/{categoryId}:
    delete:
      operationId: "deleteCategory"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "identifier of the category to remove"
        explode: false
        in: "path"
        name: "categoryId"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryId"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete a document category"
      tags:
      - "categories"
    patch:
      operationId: "updateCategory"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "identifier of the category to update"
        explode: false
        in: "path"
        name: "categoryId"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/CategoryPatch"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Partially update a document category"
      tags:
      - "categories"
  /projects/{projectName}/categoriesMetrics:
    get:
      operationId: "getCategoriesMetrics"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "facet"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryMetrics"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get some metrics on categories"
      tags:
      - "metrics"
  /projects/{projectName}/config:
    get:
      operationId: "getConfig"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "get the configuration and parameters of the project"
      tags:
      - "projects"
    patch:
      operationId: "updateConfigOptions"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/ConfigPatchOptions"
        description: "(to be documented)"
        required: true
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "update config options"
      tags:
      - "projects"
  /projects/{projectName}/corpusMetrics:
    get:
      operationId: "getCorpusMetrics"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "facet"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorpusMetrics"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get some metrics on corpus"
      tags:
      - "metrics"
  /projects/{projectName}/dataset:
    get:
      operationId: "exportDataset"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SegmentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "get the dataset of the project"
      tags:
      - "projects"
  /projects/{projectName}/documents:
    get:
      operationId: "exportDocuments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "maximum number of documents to return (0 means no limit)"
        explode: true
        in: "query"
        name: "limit"
        required: false
        schema:
          default: 0
          format: "int32"
          type: "integer"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get documents within project"
      tags:
      - "documents"
    post:
      operationId: "launchDocumentImport"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "Do not import existing labelling from within documents"
        explode: true
        in: "query"
        name: "ignoreLabelling"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "force the computation of new segments"
        explode: true
        in: "query"
        name: "segmentationPolicy"
        required: false
        schema:
          default: "compute_if_missing"
          enum:
          - "always_recompute"
          - "compute_if_missing"
          - "no_segmentation"
          - "documents_as_segments"
          type: "string"
        style: "form"
      - description: "dispatch imported documents in train/test after the import"
        explode: true
        in: "query"
        name: "splitCorpus"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "remove HTML tags and emojis (set to false at your own risk!)"
        explode: true
        in: "query"
        name: "cleanText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "assign categories on text documents according to their source\
          \ folder in the archive"
        explode: true
        in: "query"
        name: "generateCategoriesFromSourceFolder"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "upload documents and launch a job to add them into the project"
      tags:
      - "documents"
  /projects/{projectName}/documents/_load:
    post:
      operationId: "launchUploadedDocumentImport"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "Do not import existing labelling from within documents"
        explode: true
        in: "query"
        name: "ignoreLabelling"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "force the computation of new segments"
        explode: true
        in: "query"
        name: "segmentationPolicy"
        required: false
        schema:
          default: "compute_if_missing"
          enum:
          - "always_recompute"
          - "compute_if_missing"
          - "no_segmentation"
          - "documents_as_segments"
          type: "string"
        style: "form"
      - description: "dispatch imported documents in train/test after the import"
        explode: true
        in: "query"
        name: "splitCorpus"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "remove HTML tags and emojis (set to false at your own risk!)"
        explode: true
        in: "query"
        name: "cleanText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "assign categories on text documents according to their source\
          \ folder in the archive"
        explode: true
        in: "query"
        name: "generateCategoriesFromSourceFolder"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadedFileArray"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "import documents already uploaded on the server into the project"
      tags:
      - "documents"
  /projects/{projectName}/documents/_sample:
    post:
      operationId: "exportDocumentsSample"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "maximum number of documents to return. Value over 1000 are not\
          \ allowed."
        explode: true
        in: "query"
        name: "sampleSize"
        required: false
        schema:
          default: 25
          format: "int32"
          type: "integer"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a sample of documents in dataset"
      tags:
      - "documents"
  /projects/{projectName}/documents/_search:
    post:
      operationId: "searchDocuments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "the text query"
        explode: true
        in: "query"
        name: "query"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "offset from the first result you want to fetch"
        explode: true
        in: "query"
        name: "from"
        required: false
        schema:
          default: 0
          format: "int32"
          type: "integer"
        style: "form"
      - description: "maximum amount of hits to be returned"
        explode: true
        in: "query"
        name: "size"
        required: false
        schema:
          default: 10
          format: "int32"
          type: "integer"
        style: "form"
      - description: "highlight query terms"
        explode: true
        in: "query"
        name: "highlight"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "activate faceted search results"
        explode: true
        in: "query"
        name: "facet"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        explode: true
        in: "query"
        name: "queryFilter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        explode: true
        in: "query"
        name: "simpleQuery"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        explode: true
        in: "query"
        name: "selectedFacets"
        required: false
        schema:
          items:
            default: "0"
            type: "string"
          type: "array"
        style: "form"
      - description: "Whether an HTML version should be produced"
        explode: true
        in: "query"
        name: "htmlVersion"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentHits"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Search for documents"
      tags:
      - "documents"
  /projects/{projectName}/documents/_search_and_annotate:
    post:
      operationId: "searchAndAnnotateDocuments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "the text query"
        explode: true
        in: "query"
        name: "query"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        explode: true
        in: "query"
        name: "queryFilter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        explode: true
        in: "query"
        name: "simpleQuery"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        explode: true
        in: "query"
        name: "selectedFacets"
        required: false
        schema:
          items:
            default: ""
            type: "string"
          type: "array"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "annotator"
        required: true
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "annotatorProject"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "overwrite"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "restrictedOnDatasetSegments"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "emailNotification"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Search for documents and apply an annotator on them"
      tags:
      - "documents"
  /projects/{projectName}/documents/_search_and_categorize:
    post:
      operationId: "searchAndCategorizeDocuments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "the text query"
        explode: true
        in: "query"
        name: "query"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        explode: true
        in: "query"
        name: "queryFilter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        explode: true
        in: "query"
        name: "simpleQuery"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        explode: true
        in: "query"
        name: "selectedFacets"
        required: false
        schema:
          items:
            default: ""
            type: "string"
          type: "array"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryAction"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Search for documents and add/remove a category to/from all of them"
      tags:
      - "documents"
  /projects/{projectName}/documents/_search_and_delete:
    post:
      operationId: "searchAndDeleteDocuments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "the text query"
        explode: true
        in: "query"
        name: "query"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        explode: true
        in: "query"
        name: "queryFilter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        explode: true
        in: "query"
        name: "simpleQuery"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        explode: true
        in: "query"
        name: "selectedFacets"
        required: false
        schema:
          items:
            default: ""
            type: "string"
          type: "array"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Search for documents and delete them"
      tags:
      - "documents"
  /projects/{projectName}/documents/_search_and_export:
    post:
      operationId: "searchAndExportDocuments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "the text query"
        explode: true
        in: "query"
        name: "query"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        explode: true
        in: "query"
        name: "queryFilter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        explode: true
        in: "query"
        name: "simpleQuery"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        explode: true
        in: "query"
        name: "selectedFacets"
        required: false
        schema:
          items:
            default: ""
            type: "string"
          type: "array"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Search for documents and export them"
      tags:
      - "documents"
  /projects/{projectName}/documents/_search_and_tag:
    post:
      operationId: "searchAndTagDocuments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "the text query"
        explode: true
        in: "query"
        name: "query"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        explode: true
        in: "query"
        name: "queryFilter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        explode: true
        in: "query"
        name: "simpleQuery"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        explode: true
        in: "query"
        name: "selectedFacets"
        required: false
        schema:
          items:
            default: ""
            type: "string"
          type: "array"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleMetadata"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Search for documents and add/remove a metadata to/from all of them"
      tags:
      - "documents"
  /projects/{projectName}/documents/_tag:
    post:
      operationId: "setMetadataOnDocument"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "identifier"
        required: true
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleMetadata"
        description: "(to be documented)"
        required: true
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "set a metadata value on a document"
      tags:
      - "documents"
  /projects/{projectName}/documents/{docId}:
    delete:
      operationId: "deleteDocument"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "docId"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "delete a specific document"
      tags:
      - "documents"
    get:
      operationId: "getDocument"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "docId"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: "Whether an HTML version should be produced"
        explode: true
        in: "query"
        name: "htmlVersion"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a specific document"
      tags:
      - "documents"
  /projects/{projectName}/documents/{docId}/_index:
    post:
      operationId: "indexDocument"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "docId"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Index a document already in db"
      tags:
      - "documents"
  /projects/{projectName}/engine_parameters:
    get:
      operationId: "getProjectEngineParametersSchema"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "type"
        required: true
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "engine"
        required: true
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "uiSchema"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "presetMetadataValues"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: "object"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get the list of parameters of the given engine or engine function"
      tags:
      - "project engines"
  /projects/{projectName}/engines:
    get:
      operationId: "getProjectEngines"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "type"
        required: true
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: "string"
                type: "array"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Filter the list of engines available for this project"
      tags:
      - "project engines"
  /projects/{projectName}/experiments:
    delete:
      operationId: "deleteExperiments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "names"
        required: true
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete experiments"
      tags:
      - "experiments"
    get:
      operationId: "getExperiments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "coma-separated tags to filter experiments"
        explode: true
        in: "query"
        name: "tags"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExperimentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "List experiments"
      tags:
      - "experiments"
    post:
      operationId: "createExperiment"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewExperiment"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EngineName"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create an experiment"
      tags:
      - "experiments"
  /projects/{projectName}/experiments/_label_hint:
    post:
      operationId: "computeExperimentLabelHint"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputLabel"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratedLabelHint"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a somehow unique experiment label generated after the provided\
        \ experiment label"
      tags:
      - "experiments"
  /projects/{projectName}/experiments/{name}:
    delete:
      operationId: "deleteExperiment"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete an experiment"
      tags:
      - "experiments"
    get:
      operationId: "getExperiment"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Experiment"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get an experiment"
      tags:
      - "experiments"
    patch:
      operationId: "patchExperiment"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/ExperimentPatch"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Experiment"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Partially update an experiment"
      tags:
      - "experiments"
  /projects/{projectName}/experiments/{name}/_cancel:
    post:
      operationId: "cancelExperiment"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Launch an experiment"
      tags:
      - "experiments"
  /projects/{projectName}/experiments/{name}/_launch:
    post:
      operationId: "launchExperiment"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "once training is complete, annotate the corpus with the model"
        explode: true
        in: "query"
        name: "annotateCorpus"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Launch an experiment"
      tags:
      - "experiments"
  /projects/{projectName}/gazetteers:
    delete:
      operationId: "deleteGazetteers"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "names"
        required: true
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete gazetteers"
      tags:
      - "gazetteers"
    get:
      operationId: "getGazetteers"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "coma-separated tags to filter gazetteers"
        explode: true
        in: "query"
        name: "tags"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GazetteerArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "List gazetteers"
      tags:
      - "gazetteers"
    post:
      operationId: "createGazetteer"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGazetteer"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EngineName"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create a gazetteer"
      tags:
      - "gazetteers"
  /projects/{projectName}/gazetteers/_export:
    post:
      operationId: "exportGazetteers"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "coma-separated list of gazetteers to export"
        explode: true
        in: "query"
        name: "gazetteers"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "export gazetteers from the project"
      tags:
      - "gazetteers"
  /projects/{projectName}/gazetteers/_import:
    post:
      operationId: "importArchive"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EngineConfigImportSummary"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "import a gazetteer archive"
      tags:
      - "projects"
  /projects/{projectName}/gazetteers/_label_hint:
    post:
      operationId: "computeGazetteerLabelHint"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputLabel"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratedLabelHint"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a somehow unique gazetteer label generated after the provided\
        \ gazetteer label"
      tags:
      - "gazetteers"
  /projects/{projectName}/gazetteers/_load:
    post:
      operationId: "importUploadedArchive"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadedFileArray"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EngineConfigImportSummary"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "import a gazetteer archive already uploaded on the server"
      tags:
      - "projects"
  /projects/{projectName}/gazetteers/{name}:
    delete:
      operationId: "deleteGazetteer"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete a gazetteer"
      tags:
      - "gazetteers"
    get:
      operationId: "getGazetteer"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gazetteer"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a gazetteer"
      tags:
      - "gazetteers"
    patch:
      operationId: "patchGazetteer"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/GazetteerPatch"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gazetteer"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Partially update a gazetteer"
      tags:
      - "gazetteers"
  /projects/{projectName}/gazetteers/{name}/_cancel_synchronize:
    post:
      operationId: "cancelSynchronizeGazetteer"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "cancel the current synchronization, if any"
      tags:
      - "gazetteers"
  /projects/{projectName}/gazetteers/{name}/_export:
    post:
      operationId: "exportGazetteer"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "export the gazetteer"
      tags:
      - "gazetteers"
  /projects/{projectName}/gazetteers/{name}/_synchronize:
    post:
      operationId: "synchronizeGazetteer"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "once synchronization is complete, annotate the corpus with the\
          \ model"
        explode: true
        in: "query"
        name: "annotateCorpus"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Build the gazetteer model from the lexicon"
      tags:
      - "gazetteers"
  /projects/{projectName}/job:
    post:
      operationId: "launchDummyJob"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "job_desc"
        required: false
        schema:
          default: "All work and no play makes Jack a dull boy"
          type: "string"
        style: "form"
      - description: "for how long (in seconds) this job will (virtually) run"
        explode: true
        in: "query"
        name: "timeout"
        required: false
        schema:
          default: 60
          format: "int32"
          type: "integer"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "create a dummy job"
      tags:
      - "jobs"
  /projects/{projectName}/job/{job_id}:
    delete:
      operationId: "cancelJob"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "job_id"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "cancel job"
      tags:
      - "jobs"
    get:
      operationId: "getJob"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "job_id"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get job information"
      tags:
      - "jobs"
  /projects/{projectName}/job/{job_id}/_wait:
    post:
      operationId: "waitForJob"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "job_id"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Wait for the job to end before returning job information"
      tags:
      - "jobs"
  /projects/{projectName}/jobs:
    get:
      operationId: "getJobs"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "statusFilter"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBeanArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get current jobs"
      tags:
      - "jobs"
  /projects/{projectName}/label/{labelName}:
    get:
      operationId: "getLabel"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "which label to fetch"
        explode: false
        in: "path"
        name: "labelName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "compute occurrence count for each label?"
        explode: true
        in: "query"
        name: "includeCount"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get label"
      tags:
      - "labels"
  /projects/{projectName}/label_sets:
    get:
      operationId: "getLabelSets"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "also include labels"
        explode: true
        in: "query"
        name: "includeLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "compute occurrence count for each label?"
        explode: true
        in: "query"
        name: "includeLabelsCount"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelSetArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get list of labelSet"
      tags:
      - "labels"
    post:
      operationId: "createLabelSet"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelSet"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelSet"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create a labelSet"
      tags:
      - "labels"
  /projects/{projectName}/label_sets/{name}:
    delete:
      operationId: "deleteLabelSet"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete a label set (and all its label and annotations associated with)"
      tags:
      - "labels"
    get:
      operationId: "getLabelSet"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "also include labels"
        explode: true
        in: "query"
        name: "includeLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "compute occurrence count for each label?"
        explode: true
        in: "query"
        name: "includeLabelsCount"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelSet"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a labelSet"
      tags:
      - "labels"
    patch:
      operationId: "updateLabelSet"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelSetUpdate"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelSet"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Update a labelSet"
      tags:
      - "labels"
  /projects/{projectName}/labels:
    delete:
      operationId: "deleteLabelByNames"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelNames"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Remove label by name"
      tags:
      - "labels"
    get:
      operationId: "getLabels"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "compute occurrence count for each label?"
        explode: true
        in: "query"
        name: "includeCount"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "which label set (could be left empty to get all labels)"
        explode: true
        in: "query"
        name: "labelSetName"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get labels"
      tags:
      - "labels"
    post:
      operationId: "createLabel"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialLabel"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create a label"
      tags:
      - "labels"
  /projects/{projectName}/labels/{labelName}:
    delete:
      operationId: "deleteLabelByName"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "labelName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Remove label by name"
      tags:
      - "labels"
    patch:
      operationId: "updateLabel"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "labelName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelUpdate"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Update a label"
      tags:
      - "labels"
    put:
      deprecated: true
      operationId: "updateLabelPut"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "labelName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelUpdate"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Update a label (Please use PATCH instead of PUT)"
      tags:
      - "labels"
  /projects/{projectName}/lexicons:
    get:
      operationId: "getLexicons"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "computeMetrics"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LexiconArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get lexicons"
      tags:
      - "lexicons"
    post:
      operationId: "createLexicon"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialLexicon"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: "object"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create a lexicon"
      tags:
      - "lexicons"
  /projects/{projectName}/lexicons/_search:
    post:
      operationId: "searchTerms"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "the text query"
        explode: true
        in: "query"
        name: "query"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "offset from the first result you want to fetch"
        explode: true
        in: "query"
        name: "from"
        required: false
        schema:
          default: 0
          format: "int32"
          type: "integer"
        style: "form"
      - description: "maximum amount of hits to be returned"
        explode: true
        in: "query"
        name: "size"
        required: false
        schema:
          default: 10
          format: "int32"
          type: "integer"
        style: "form"
      - description: "highlight query terms"
        explode: true
        in: "query"
        name: "highlight"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "activate faceted search results"
        explode: true
        in: "query"
        name: "facet"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        explode: true
        in: "query"
        name: "queryFilter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        explode: true
        in: "query"
        name: "simpleQuery"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        explode: true
        in: "query"
        name: "selectedFacets"
        required: false
        schema:
          items:
            default: "0"
            type: "string"
          type: "array"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TermHits"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Search for terms"
      tags:
      - "lexicons"
  /projects/{projectName}/lexicons/{lexiconName}:
    delete:
      operationId: "deleteLexiconByName"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "lexiconName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Remove lexicon"
      tags:
      - "lexicons"
    get:
      operationId: "getLexicon"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "lexiconName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "computeMetrics"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lexicon"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a lexicon"
      tags:
      - "lexicons"
    patch:
      operationId: "updateLexicon"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "lexiconName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/LexiconUpdate"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lexicon"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Update a lexicon"
      tags:
      - "lexicons"
    post:
      operationId: "createTerm"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "lexiconName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "overwrite"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: "object"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create a new term in the lexicon"
      tags:
      - "lexicons"
  /projects/{projectName}/lexicons/{lexiconName}/_delete_term:
    post:
      operationId: "deleteTerm"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "lexiconName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TermIdentifier"
        description: "(to be documented)"
        required: true
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete a term from a lexicon"
      tags:
      - "lexicons"
  /projects/{projectName}/lexicons/{lexiconName}/_load:
    post:
      operationId: "launchUploadedTermsImport"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "lexiconName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TermImport"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "import a term file already uploaded on the server into the project"
      tags:
      - "lexicons"
  /projects/{projectName}/messages:
    get:
      operationId: "getProjectMessages"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "group"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "language"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: "if unspecified then all messages are returned, otherwise only\
          \ messages read/unread by the calling user will be returned"
        explode: true
        in: "query"
        name: "read"
        required: false
        schema:
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "scopes"
        required: false
        schema:
          items:
            enum:
            - "open_campaign"
            - "open_session"
            - "stop_campaign"
            type: "string"
          type: "array"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get messages of current user"
      tags:
      - "messages"
    post:
      operationId: "createProjectMessage"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewMessage"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageId"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create a message"
      tags:
      - "messages"
  /projects/{projectName}/messages/{messageId}:
    delete:
      operationId: "deleteProjectMessage"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "messageId"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "delete message"
      tags:
      - "messages"
    get:
      operationId: "getProjectMessage"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "messageId"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get message"
      tags:
      - "messages"
    patch:
      operationId: "updateProjectMessage"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "messageId"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/MessagePatch"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Partially update a message"
      tags:
      - "messages"
  /projects/{projectName}/messages/{messageId}/_mark:
    post:
      operationId: "markProjectMessage"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "messageId"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageMark"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Mark a message as read/unread"
      tags:
      - "messages"
  /projects/{projectName}/metadata:
    get:
      operationId: "getMetadataDefinition"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataDefinitionArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "get the list of known metadata in this project"
      tags:
      - "projects"
  /projects/{projectName}/modelMetrics:
    get:
      operationId: "getModelMetrics"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelsMetrics"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get some metrics on models"
      tags:
      - "metrics"
  /projects/{projectName}/models:
    delete:
      operationId: "deleteModels"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "delete all known models"
      tags:
      - "models"
  /projects/{projectName}/models/_generated_label_names:
    get:
      operationId: "getGeneratedLabelNames"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "configName"
        required: true
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: "object"
                type: "array"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Returns the list of label names generated by the latest model of the\
        \ configuration"
      tags:
      - "models"
  /projects/{projectName}/plans:
    delete:
      operationId: "deletePlans"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "names"
        required: true
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete plans"
      tags:
      - "plans"
    get:
      operationId: "getPlans"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "coma-separated tags to filter plans"
        explode: true
        in: "query"
        name: "tags"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamedAnnotationPlanArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "List plans"
      tags:
      - "plans"
    post:
      operationId: "createPlan"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewNamedAnnotationPlan"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EngineName"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create a plan"
      tags:
      - "plans"
  /projects/{projectName}/plans/_label_hint:
    post:
      operationId: "computePlanLabelHint"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputLabel"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratedLabelHint"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a somehow unique plan label generated after the provided plan\
        \ label"
      tags:
      - "plans"
  /projects/{projectName}/plans/{name}:
    delete:
      operationId: "deletePlan"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete a plan"
      tags:
      - "plans"
    get:
      operationId: "getPlan"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamedAnnotationPlan"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a plan"
      tags:
      - "plans"
    patch:
      operationId: "patchPlan"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/PlanPatch"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamedAnnotationPlan"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Partially update a plan"
      tags:
      - "plans"
  /projects/{projectName}/plans/{planName}/_annotate_binary:
    post:
      deprecated: true
      operationId: "deprecatedAnnotateBinaryWithPlanRef"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "planName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotatedDocumentArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a binary document with multiple annotators (replaced with\
        \ /projects/{projectName}/annotators/{annotator}/_annotate_binary)"
      tags:
      - "annotate"
  /projects/{projectName}/plans/{planName}/_annotate_format_binary:
    post:
      deprecated: true
      operationId: "deprecatedAnnotateFormatBinaryWithPlanRef"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "planName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                format: "binary"
                type: "string"
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
            application/xml:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a binary document with multiple annotators and return a formatted\
        \ result (replaced with /projects/{projectName}/annotators/{annotator}/_annotate_format_binary)"
      tags:
      - "annotate"
  /projects/{projectName}/plans/{planName}/_annotate_format_documents:
    post:
      deprecated: true
      operationId: "deprecatedAnnotateFormatDocumentsWithPlanRef"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "planName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputDocumentArray"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: "binary"
                type: "string"
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
            application/xml:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate documents with multiple annotators and return formatted results\
        \ in a zip (replaced with /projects/{projectName}/annotators/{annotator}/_annotate_format_text)"
      tags:
      - "annotate"
  /projects/{projectName}/plans/{planName}/_annotate_format_text:
    post:
      deprecated: true
      operationId: "deprecatedAnnotateFormatTextWithPlanRef"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "planName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabels"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineLabelIds"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "inlineText"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: "do not use in production! completely changes the response format"
        explode: true
        in: "query"
        name: "debug"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "parallelize"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          text/plain:
            schema:
              type: "string"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: "binary"
                type: "string"
            application/octet-stream:
              schema:
                format: "binary"
                type: "string"
            application/xml:
              schema:
                format: "binary"
                type: "string"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "annotate a text with multiple annotators and return a formatted result\
        \ (replaced with /projects/{projectName}/annotators/{annotator}/_annotate_format_text)"
      tags:
      - "annotate"
  /projects/{projectName}/properties:
    get:
      operationId: "getProperties"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectProperty"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "get the properties of the project"
      tags:
      - "projects"
  /projects/{projectName}/segments/_context:
    post:
      operationId: "getSegmentContext"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "Document identifier of the segment"
        explode: true
        in: "query"
        name: "documentIdentifier"
        required: true
        schema:
          type: "string"
        style: "form"
      - description: "Start position of the segment in the document"
        explode: true
        in: "query"
        name: "segmentStart"
        required: true
        schema:
          format: "int32"
          type: "integer"
        style: "form"
      - description: "Index of the first of preceding segments to be returned"
        explode: true
        in: "query"
        name: "fromBefore"
        required: false
        schema:
          default: 0
          format: "int32"
          type: "integer"
        style: "form"
      - description: "Number of preceding segments to be returned (-1 for all)"
        explode: true
        in: "query"
        name: "sizeBefore"
        required: false
        schema:
          default: 1
          format: "int32"
          type: "integer"
        style: "form"
      - description: "Index of the first of next segments to be returned"
        explode: true
        in: "query"
        name: "fromAfter"
        required: false
        schema:
          default: 0
          format: "int32"
          type: "integer"
        style: "form"
      - description: "Number of following segments to be returned (-1 for all)"
        explode: true
        in: "query"
        name: "sizeAfter"
        required: false
        schema:
          default: 1
          format: "int32"
          type: "integer"
        style: "form"
      - description: "Output of the context (segments, merged segments into a single\
          \ one, all)"
        explode: true
        in: "query"
        name: "contextOutput"
        required: false
        schema:
          default: "segments"
          enum:
          - "segments"
          - "merged_segments"
          - "all"
          type: "string"
        style: "form"
      - description: "Include segment annotations"
        explode: true
        in: "query"
        name: "includeAnnotations"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "Whether an HTML version should be produced"
        explode: true
        in: "query"
        name: "htmlVersion"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SegmentContexts"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get segments surrounding a segment"
      tags:
      - "segments"
  /projects/{projectName}/segments/_recompute:
    post:
      operationId: "recomputeSegments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SherpaJobBean"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Re-compute segments"
      tags:
      - "segments"
  /projects/{projectName}/segments/_search:
    post:
      operationId: "searchSegments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "the text query"
        explode: true
        in: "query"
        name: "query"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "offset from the first result you want to fetch"
        explode: true
        in: "query"
        name: "from"
        required: false
        schema:
          default: 0
          format: "int32"
          type: "integer"
        style: "form"
      - description: "maximum amount of hits to be returned"
        explode: true
        in: "query"
        name: "size"
        required: false
        schema:
          default: 10
          format: "int32"
          type: "integer"
        style: "form"
      - description: "highlight query terms"
        explode: true
        in: "query"
        name: "highlight"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "activate faceted search results"
        explode: true
        in: "query"
        name: "facet"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        explode: true
        in: "query"
        name: "queryFilter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        explode: true
        in: "query"
        name: "simpleQuery"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        explode: true
        in: "query"
        name: "selectedFacets"
        required: false
        schema:
          items:
            default: "0"
            type: "string"
          type: "array"
        style: "form"
      - description: "Whether an HTML version should be produced"
        explode: true
        in: "query"
        name: "htmlVersion"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SegmentHits"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Search for segments"
      tags:
      - "segments"
  /projects/{projectName}/segments/_similar:
    post:
      operationId: "findSimilarSegments"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "String (internal) id of the segment"
        explode: true
        in: "query"
        name: "segid"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "The text query"
        explode: true
        in: "query"
        name: "text"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "Coma separated list of fields to consider for the similarity"
        explode: true
        in: "query"
        name: "fields"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "offset from the first result you want to fetch"
        explode: true
        in: "query"
        name: "from"
        required: false
        schema:
          default: 0
          format: "int32"
          type: "integer"
        style: "form"
      - description: "maximum amount of hits to be returned"
        explode: true
        in: "query"
        name: "size"
        required: false
        schema:
          default: 10
          format: "int32"
          type: "integer"
        style: "form"
      - description: "highlight query terms"
        explode: true
        in: "query"
        name: "highlight"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "activate faceted search results"
        explode: true
        in: "query"
        name: "facet"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        explode: true
        in: "query"
        name: "queryFilter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        explode: true
        in: "query"
        name: "outputFields"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        explode: true
        in: "query"
        name: "simpleQuery"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        explode: true
        in: "query"
        name: "selectedFacets"
        required: false
        schema:
          items:
            default: "0"
            type: "string"
          type: "array"
        style: "form"
      - description: "Whether an HTML version should be produced"
        explode: true
        in: "query"
        name: "htmlVersion"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SegmentHits"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Search for similar segments"
      tags:
      - "segments"
  /projects/{projectName}/services:
    get:
      operationId: "getProjectServices"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "name"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "engine"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "function"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "type"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "version"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpServiceRecordArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Filter the list of services available for this project"
      tags:
      - "project engines"
  /projects/{projectName}/shares/groups:
    get:
      operationId: "getGroupShares"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupShareArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "List of groups shares of the project"
      tags:
      - "shares"
    post:
      operationId: "shareWithGroup"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "groupName"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareMode"
        description: "(to be documented)"
        required: true
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: ""
      tags:
      - "shares"
  /projects/{projectName}/shares/groups/{groupName}:
    delete:
      operationId: "deleteShareWithGroup"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "groupName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: ""
      tags:
      - "shares"
  /projects/{projectName}/shares/users:
    get:
      operationId: "getUserShares"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupShareArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "List of user shares of the project"
      tags:
      - "shares"
    post:
      operationId: "shareWithUser"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "username"
        required: true
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareMode"
        description: "(to be documented)"
        required: true
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: ""
      tags:
      - "shares"
  /projects/{projectName}/shares/users/{username}:
    delete:
      operationId: "deleteShareWithUser"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "username"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: ""
      tags:
      - "shares"
  /projects/{projectName}/suggesters:
    delete:
      operationId: "deleteSuggesters"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "names"
        required: true
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete suggesters"
      tags:
      - "suggesters"
    get:
      operationId: "getSuggesters"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "coma-separated tags to filter suggesters"
        explode: true
        in: "query"
        name: "tags"
        required: false
        schema:
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuggesterArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "List suggesters"
      tags:
      - "suggesters"
    post:
      operationId: "createSuggester"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSuggester"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EngineName"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create a suggester"
      tags:
      - "suggesters"
  /projects/{projectName}/suggesters/_label_hint:
    post:
      operationId: "computeSuggesterLabelHint"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputLabel"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratedLabelHint"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a somehow unique suggester label generated after the provided\
        \ suggester label"
      tags:
      - "suggesters"
  /projects/{projectName}/suggesters/{name}:
    delete:
      operationId: "deleteSuggester"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete a suggester"
      tags:
      - "suggesters"
    get:
      operationId: "getSuggester"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suggester"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get a suggester"
      tags:
      - "suggesters"
    patch:
      operationId: "patchSuggester"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/SuggesterPatch"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suggester"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Partially update a suggester"
      tags:
      - "suggesters"
  /projects/{projectName}/suggesters/{name}/_start:
    post:
      operationId: "startSuggester"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Start a suggester"
      tags:
      - "suggesters"
  /projects/{projectName}/suggesters/{name}/_stop:
    post:
      operationId: "stopSuggester"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "name"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "204":
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Stop a suggester"
      tags:
      - "suggesters"
  /projects/{projectName}/suggestions:
    get:
      operationId: "getSuggestions"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "from"
        required: false
        schema:
          default: 0
          format: "int32"
          type: "integer"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "size"
        required: false
        schema:
          default: 25
          format: "int32"
          type: "integer"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "sort"
        required: false
        schema:
          default: "sampling"
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "filter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "htmlVersion"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "facet"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: "object"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get suggestions according to the project nature"
      tags:
      - "suggestions"
  /projects/{projectName}/suggestions/_clear:
    post:
      operationId: "clearSuggestions"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationCount"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Remove all suggestions from the dataset"
      tags:
      - "suggestions"
  /projects/{projectName}/suggestions/{suggestionId}:
    delete:
      operationId: "deleteSuggestion"
      parameters:
      - description: "project name"
        explode: false
        in: "path"
        name: "projectName"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: false
        in: "path"
        name: "suggestionId"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete a suggestion from the dataset"
      tags:
      - "suggestions"
  /roles:
    get:
      operationId: "getRoles"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleDescArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get roles"
      tags:
      - "roles"
    post:
      operationId: "addRole"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "groupName"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "restricted"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewRole"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleDesc"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Create role"
      tags:
      - "roles"
  /roles/{rolename}:
    delete:
      operationId: "deleteRole"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "rolename"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete role"
      tags:
      - "roles"
    get:
      operationId: "getRole"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "rolename"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleDesc"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get role"
      tags:
      - "roles"
    patch:
      operationId: "updateRole"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "rolename"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/RoleUpdate"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Update role"
      tags:
      - "roles"
  /service_values:
    get:
      operationId: "getServicesDistinctValues"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "field"
        required: true
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "name"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "api"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "engine"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "function"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "language"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "type"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "nature"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "version"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "termImporter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "annotator"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "processor"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "formatter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "converter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "segmenter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "languageGuesser"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: "object"
                type: "array"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Filter the list of available services and return distinct values"
      tags:
      - "services"
  /services:
    get:
      operationId: "getServices"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "name"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "api"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "engine"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "function"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "language"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "type"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "nature"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "version"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "termImporter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "annotator"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "processor"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "formatter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "converter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "segmenter"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "languageGuesser"
        required: false
        schema:
          default: ""
          type: "string"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpServiceRecordArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Filter the list of available services"
      tags:
      - "services"
  /services/{service}/parameters:
    get:
      operationId: "getEngineParametersSchema"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "service"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: ""
        explode: true
        in: "query"
        name: "nature"
        required: true
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "function"
        required: true
        schema:
          type: "string"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "uiSchema"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: "object"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "get the options of the given service in JSON schema format"
      tags:
      - "services"
  /uploads:
    post:
      operationId: "uploadFiles"
      parameters:
      - description: "TTL of the upload in seconds"
        explode: true
        in: "query"
        name: "ttl"
        required: false
        schema:
          default: 0
          format: "int64"
          type: "integer"
        style: "form"
      - description: "Also copy the uploaded file in the images directory (same TTL)"
        explode: true
        in: "query"
        name: "image"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: "binary"
                  type: "string"
              type: "object"
        description: "(to be documented)"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadedFileArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: ""
      tags:
      - "uploads"
  /uploads/{id}:
    get:
      operationId: "getUploadedFileInfo"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadedFileInfo"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: ""
      tags:
      - "uploads"
  /users:
    get:
      operationId: "getUsers"
      parameters:
      - description: "name of a users' group"
        explode: true
        in: "query"
        name: "groupName"
        required: false
        schema:
          type: "string"
        style: "form"
      - description: "require information about permissions and roles"
        explode: true
        in: "query"
        name: "adminData"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseArray"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get users"
      tags:
      - "users"
    post:
      operationId: "addUser"
      parameters:
      - description: ""
        explode: true
        in: "query"
        name: "groupName"
        required: false
        schema:
          type: "string"
        style: "form"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
          description: "(to be documented)"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Add user"
      tags:
      - "users"
  /users/{username}:
    delete:
      operationId: "deleteUser"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "username"
        required: true
        schema:
          type: "string"
        style: "simple"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Delete user"
      tags:
      - "users"
    get:
      operationId: "getUser"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "username"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "require information about permissions and roles"
        explode: true
        in: "query"
        name: "adminData"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      - description: ""
        explode: true
        in: "query"
        name: "jwtFormat"
        required: false
        schema:
          default: false
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get user"
      tags:
      - "users"
    patch:
      operationId: "updatePermissions"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "username"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/UserPermissionsUpdate"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Update user roles or permissions"
      tags:
      - "users"
  /users/{username}/profile:
    get:
      operationId: "getUserProfile"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "username"
        required: true
        schema:
          type: "string"
        style: "simple"
      - description: "require information about email (for instance)"
        explode: true
        in: "query"
        name: "privateData"
        required: false
        schema:
          default: true
          type: "boolean"
        style: "form"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Get user profile"
      tags:
      - "users"
    patch:
      operationId: "updateProfile"
      parameters:
      - description: ""
        explode: false
        in: "path"
        name: "username"
        required: true
        schema:
          type: "string"
        style: "simple"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/UserProfileUpdate"
        description: "(to be documented)"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ack"
          description: "(to be documented)"
        "404":
          description: "no such element"
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "(to be documented)"
      summary: "Update user profile"
      tags:
      - "users"
security:
- bearerAuth: []
- basicAuth: []
servers:
- url: /api
tags:
- description: "Authenticate before using the API"
  name: "authentication"
- description: "Your projects"
  name: "projects"
- description: "Documents in projects"
  name: "documents"
- description: "Segments in projects"
  name: "segments"
- description: "Documents alternative texts in projects"
  name: "alt-texts"
- description: "Annotation or category labels"
  name: "labels"
- description: "Annotations in datasets"
  name: "annotations"
- description: "Categories in datasets"
  name: "categories"
- description: "Suggested annotations"
  name: "suggestions"
- description: "Machine learning experiments"
  name: "experiments"
- description: "Suggestion processes"
  name: "suggesters"
- description: "Models"
  name: "models"
- description: "Gazetteers"
  name: "gazetteers"
- description: "Lexicons"
  name: "lexicons"
- description: "Available annotators"
  name: "annotators"
- description: "Process documents"
  name: "annotate"
- description: "Project engines"
  name: "project engines"
- description: "Services"
  name: "services"
- description: "Project metrics"
  name: "metrics"
- description: "Users' groups"
  name: "groups"
- description: "Users"
  name: "users"
- description: "User roles"
  name: "roles"
- description: "Project shares"
  name: "shares"
