openapi: 3.0.0
info:
  title: Sherpa API documentation
  license:
    name: MIT
  version: 1.0.0
servers:
- url: /api
security:
- bearerAuth: []
- basicAuth: []
tags:
- name: authentication
  description: Authenticate before using the API
- name: projects
  description: Your projects
- name: documents
  description: Documents in projects
- name: segments
  description: Segments in projects
- name: labels
  description: Annotation or category labels
- name: annotations
  description: Annotations in datasets
- name: categories
  description: Categories in datasets
- name: suggestions
  description: Suggested annotations
- name: experiments
  description: Machine learning experiments
- name: suggesters
  description: Suggestion processes
- name: models
  description: Models
- name: gazetteers
  description: Gazetteers
- name: lexicons
  description: Lexicons
- name: annotators
  description: Available annotators
- name: annotate
  description: Process documents
- name: project engines
  description: Project engines
- name: services
  description: Services
- name: metrics
  description: Project metrics
- name: groups
  description: Users' groups
- name: users
  description: Users
- name: roles
  description: User roles
- name: shares
  description: Project shares
paths:
  /auth/logout:
    post:
      tags:
      - authentication
      summary: Logout
      operationId: userSignOut
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /uploads/{id}:
    get:
      tags:
      - uploads
      operationId: getUploadedFileInfo
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedFileInfo'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /uploads:
    post:
      tags:
      - uploads
      operationId: uploadFiles
      parameters:
      - name: ttl
        in: query
        description: TTL of the upload in seconds
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          default: 0
      - name: image
        in: query
        description: Also copy the uploaded file in the images directory (same TTL)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedFileArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/annotationMetrics:
    get:
      tags:
      - metrics
      summary: Get some metrics on annotations
      operationId: getAnnotationMetrics
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: facet
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationMetrics'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/categoriesMetrics:
    get:
      tags:
      - metrics
      summary: Get some metrics on categories
      operationId: getCategoriesMetrics
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: facet
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryMetrics'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/corpusMetrics:
    get:
      tags:
      - metrics
      summary: Get some metrics on corpus
      operationId: getCorpusMetrics
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: facet
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorpusMetrics'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/modelMetrics:
    get:
      tags:
      - metrics
      summary: Get some metrics on models
      operationId: getModelMetrics
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsMetrics'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/plans/_label_hint:
    post:
      tags:
      - plans
      summary: Get a somehow unique plan label generated after the provided plan label
      operationId: computePlanLabelHint
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputLabel'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedLabelHint'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/plans:
    get:
      tags:
      - plans
      summary: List plans
      operationId: getPlans
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamedAnnotationPlanArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - plans
      summary: Create a plan
      operationId: createPlan
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewNamedAnnotationPlan'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineName'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - plans
      summary: Delete plans
      operationId: deletePlans
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: names
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/plans/{name}:
    get:
      tags:
      - plans
      summary: Get a plan
      operationId: getPlan
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamedAnnotationPlan'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - plans
      summary: Delete a plan
      operationId: deletePlan
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - plans
      summary: Partially update a plan
      operationId: patchPlan
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/PlanPatch'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamedAnnotationPlan'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/suggesters/_label_hint:
    post:
      tags:
      - suggesters
      summary: Get a somehow unique suggester label generated after the provided suggester
        label
      operationId: computeSuggesterLabelHint
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputLabel'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedLabelHint'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/suggesters:
    get:
      tags:
      - suggesters
      summary: List suggesters
      operationId: getSuggesters
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggesterArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - suggesters
      summary: Create a suggester
      operationId: createSuggester
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSuggester'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineName'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - suggesters
      summary: Delete suggesters
      operationId: deleteSuggesters
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: names
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/suggesters/{name}:
    get:
      tags:
      - suggesters
      summary: Get a suggester
      operationId: getSuggester
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Suggester'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - suggesters
      summary: Delete a suggester
      operationId: deleteSuggester
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - suggesters
      summary: Partially update a suggester
      operationId: patchSuggester
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/SuggesterPatch'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Suggester'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/suggesters/{name}/_start:
    post:
      tags:
      - suggesters
      summary: Start a suggester
      operationId: startSuggester
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/suggesters/{name}/_stop:
    post:
      tags:
      - suggesters
      summary: Stop a suggester
      operationId: stopSuggester
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/suggestions/_clear:
    post:
      tags:
      - suggestions
      summary: Remove all suggestions from the dataset
      operationId: clearSuggestions
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationCount'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/suggestions/{suggestionId}:
    delete:
      tags:
      - suggestions
      summary: Delete a suggestion from the dataset
      operationId: deleteSuggestion
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: suggestionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/suggestions:
    get:
      tags:
      - suggestions
      summary: Get suggestions according to the project nature
      operationId: getSuggestions
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: from
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 25
      - name: sort
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: sampling
      - name: filter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: htmlVersion
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: facet
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                type: object
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/{service}/parameters:
    get:
      tags:
      - services
      summary: get the options of the given service in JSON schema format
      operationId: getEngineParametersSchema
      parameters:
      - name: service
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: nature
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: function
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: uiSchema
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                type: object
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services:
    get:
      tags:
      - services
      summary: Filter the list of available services
      operationId: getServices
      parameters:
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: api
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: engine
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: function
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: language
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: type
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: nature
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: version
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: termImporter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: annotator
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: processor
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: formatter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: converter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpServiceRecordArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /service_values:
    get:
      tags:
      - services
      summary: Filter the list of available services and return distinct values
      operationId: getServicesDistinctValues
      parameters:
      - name: field
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: api
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: engine
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: function
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: language
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: type
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: nature
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: version
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: termImporter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: annotator
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: processor
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: formatter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: converter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/annotations/_count_creators:
    post:
      tags:
      - annotations
      summary: Get annotations count per creators
      operationId: annotationCreatorsCount
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedByCountArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/annotations/_clear:
    post:
      tags:
      - annotations
      summary: Delete annotations from the corpus
      operationId: clearAnnotations
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: labels
        in: query
        description: list of label name to consider (or all if left empty)
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: createdBy
        in: query
        description: list of 'createdyBy' to consider (or all if left empty)
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationCount'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/annotations/_count:
    post:
      tags:
      - annotations
      summary: count annotations in the corpus
      operationId: countAnnotations
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: labels
        in: query
        description: list of label name to consider (or all if left empty)
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: createdBy
        in: query
        description: list of 'createdyBy' to consider (or all if left empty)
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationCount'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/annotations:
    post:
      tags:
      - annotations
      summary: Add an annotation into the dataset
      operationId: createAnnotation
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Annotation'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationId'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/annotations/{annotid}:
    delete:
      tags:
      - annotations
      summary: Delete an annotation
      operationId: deleteAnnotation
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: annotid
        in: path
        description: String identifier of the annotation
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/annotators/{annotator}/_annotate_corpus:
    post:
      tags:
      - annotate
      summary: Annotate the whole corpus with the given annotator
      operationId: annotateCorpusWith
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: annotator
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: annotatorProject
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: overwrite
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/annotators/{annotator}/_annotate_documents:
    post:
      tags:
      - annotate
      summary: Annotate documents with the given annotator
      operationId: annotateDocumentsWith
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: annotator
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: outputFields
        in: query
        description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputDocumentArray'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedDocumentArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_annotate:
    post:
      tags:
      - annotate
      summary: Annotate text with the last model of the Sherpa suggester
      operationId: annotateText
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: outputFields
        in: query
        description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedDocument'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/annotators/{annotator}/_annotate:
    post:
      tags:
      - annotate
      summary: Annotate text with the given annotator
      operationId: annotateTextWith
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: annotator
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: outputFields
        in: query
        description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedDocument'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_chown:
    post:
      tags:
      - shares
      summary: Change the ownership of the project (user and group)
      operationId: changeProjectOwnership
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: username
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: groupName
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/shares/groups/{groupName}:
    delete:
      tags:
      - shares
      operationId: deleteShareWithGroup
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: groupName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/shares/users/{username}:
    delete:
      tags:
      - shares
      operationId: deleteShareWithUser
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: username
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/shares/groups:
    get:
      tags:
      - shares
      summary: List of groups shares of the project
      operationId: getGroupShares
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupShareArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - shares
      operationId: shareWithGroup
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: groupName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareMode'
        required: true
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/shares/users:
    get:
      tags:
      - shares
      summary: List of user shares of the project
      operationId: getUserShares
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupShareArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - shares
      operationId: shareWithUser
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: username
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareMode'
        required: true
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/lexicons:
    get:
      tags:
      - lexicons
      summary: Get lexicons
      operationId: getLexicons
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: computeMetrics
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LexiconArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - lexicons
      summary: Create a lexicon
      operationId: createLexicon
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialLexicon'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                type: object
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/lexicons/{lexiconName}:
    get:
      tags:
      - lexicons
      summary: Get a lexicon
      operationId: getLexicon
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: lexiconName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: computeMetrics
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lexicon'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - lexicons
      summary: Create a new term in the lexicon
      operationId: createTerm
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: lexiconName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Term'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                type: object
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - lexicons
      summary: Remove lexicon
      operationId: deleteLexiconByName
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: lexiconName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - lexicons
      summary: Update a lexicon
      operationId: updateLexicon
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: lexiconName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/LexiconUpdate'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lexicon'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/lexicons/{lexiconName}/_load:
    post:
      tags:
      - lexicons
      summary: import a term file already uploaded on the server into the project
      operationId: launchUploadedTermsImport
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: lexiconName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TermImport'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/lexicons/_search:
    post:
      tags:
      - lexicons
      summary: Search for terms
      operationId: searchTerms
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: query
        in: query
        description: the text query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: from
        in: query
        description: offset from the first result you want to fetch
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        description: maximum amount of hits to be returned
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: highlight
        in: query
        description: highlight query terms
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: facet
        in: query
        description: activate faceted search results
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: queryFilter
        in: query
        description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: outputFields
        in: query
        description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: simpleQuery
        in: query
        description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: selectedFacets
        in: query
        description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: "0"
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermHits'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      tags:
      - users
      summary: Get users
      operationId: getUsers
      parameters:
      - name: groupName
        in: query
        description: name of a users' group
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: adminData
        in: query
        description: require information about permissions and roles
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - users
      summary: Add user
      operationId: addUser
      parameters:
      - name: groupName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{username}:
    get:
      tags:
      - users
      summary: Get user
      operationId: getUser
      parameters:
      - name: username
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: adminData
        in: query
        description: require information about permissions and roles
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: jwtFormat
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - users
      summary: Delete user
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - users
      summary: Update user roles or permissions
      operationId: updatePermissions
      parameters:
      - name: username
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/UserPermissionsUpdate'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{username}/profile:
    patch:
      tags:
      - users
      summary: Update user profile
      operationId: updateProfile
      parameters:
      - name: username
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/categories/_count_creators:
    post:
      tags:
      - categories
      summary: Get categories count per creators
      operationId: categoryCreatorsCount
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedByCountArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/categories/_count:
    post:
      tags:
      - categories
      summary: Count categories in the corpus
      operationId: countCategories
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: labels
        in: query
        description: list of label name to consider (or all if left empty)
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: createdBy
        in: query
        description: list of 'createdyBy' to consider (or all if left empty)
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationCount'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/categories:
    post:
      tags:
      - categories
      summary: Create a document category
      operationId: createDocumentCategory
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryId'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/categories/_clear:
    post:
      tags:
      - categories
      summary: Remove categories from the corpus
      operationId: deleteCategories
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: labels
        in: query
        description: list of label name to consider (or all if left empty)
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: createdBy
        in: query
        description: list of 'createdyBy' to consider (or all if left empty)
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationCount'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/categories/{categoryId}:
    delete:
      tags:
      - categories
      summary: Delete a document category
      operationId: deleteCategory
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: categoryId
        in: path
        description: label of the category to remove
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryId'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/segments/_similar:
    post:
      tags:
      - segments
      summary: Search for similar segments
      operationId: findSimilarSegments
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: segid
        in: query
        description: String (internal) id of the segment
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: text
        in: query
        description: The text query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: fields
        in: query
        description: Coma separated list of fields to consider for the similarity
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: from
        in: query
        description: offset from the first result you want to fetch
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        description: maximum amount of hits to be returned
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: highlight
        in: query
        description: highlight query terms
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: facet
        in: query
        description: activate faceted search results
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: queryFilter
        in: query
        description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: outputFields
        in: query
        description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: simpleQuery
        in: query
        description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: selectedFacets
        in: query
        description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: "0"
      - name: htmlVersion
        in: query
        description: Whether an HTML version should be produced
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentHits'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/segments/_context:
    post:
      tags:
      - segments
      summary: Get segments surrounding a segment
      operationId: getSegmentContext
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: documentIdentifier
        in: query
        description: Document identifier of the segment
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: segmentStart
        in: query
        description: Start position of the segment in the document
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fromBefore
        in: query
        description: Index of the first of preceding segments to be returned
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: sizeBefore
        in: query
        description: Number of preceding segments to be returned (-1 for all)
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: fromAfter
        in: query
        description: Index of the first of next segments to be returned
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: sizeAfter
        in: query
        description: Number of following segments to be returned (-1 for all)
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: contextOutput
        in: query
        description: "Output of the context (segments, merged segments into a single\
          \ one, all)"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: segments
          enum:
          - segments
          - merged_segments
          - all
      - name: includeAnnotations
        in: query
        description: Include segment annotations
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: htmlVersion
        in: query
        description: Whether an HTML version should be produced
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentContexts'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/segments/_search:
    post:
      tags:
      - segments
      summary: Search for segments
      operationId: searchSegments
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: query
        in: query
        description: the text query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: from
        in: query
        description: offset from the first result you want to fetch
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        description: maximum amount of hits to be returned
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: highlight
        in: query
        description: highlight query terms
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: facet
        in: query
        description: activate faceted search results
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: queryFilter
        in: query
        description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: outputFields
        in: query
        description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: simpleQuery
        in: query
        description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: selectedFacets
        in: query
        description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: "0"
      - name: htmlVersion
        in: query
        description: Whether an HTML version should be produced
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentHits'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/engine_parameters:
    get:
      tags:
      - project engines
      summary: Get the list of parameters of the given engine or engine function
      operationId: getProjectEngineParametersSchema
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: type
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: engine
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: uiSchema
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                type: object
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/engines:
    get:
      tags:
      - project engines
      summary: Filter the list of engines available for this project
      operationId: getProjectEngines
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: type
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/services:
    get:
      tags:
      - project engines
      summary: Filter the list of services available for this project
      operationId: getProjectServices
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: engine
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: function
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: type
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: version
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpServiceRecordArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/annotators_by_type:
    get:
      tags:
      - annotators
      summary: List annotators by type
      operationId: getAnnotatorsByType
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatorMultimap'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /annotate/_annotate_binary:
    post:
      tags:
      - annotate
      summary: annotate a binary document with multiple annotators
      operationId: annotateBinary
      parameters:
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: outputFields
        in: query
        description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnnotateBinaryForm'
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedDocumentArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /annotate/_annotate_documents:
    post:
      tags:
      - annotate
      summary: annotate documents with many annotators
      operationId: annotateDocumentsWithMany
      parameters:
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: outputFields
        in: query
        description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotateDocumentsWithMany'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedDocumentArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /annotate/_annotate_format_binary:
    post:
      tags:
      - annotate
      summary: annotate a binary document with multiple annotators and return a formatted
        result
      operationId: annotateFormatBinary
      parameters:
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormatBinaryForm'
      responses:
        "200":
          description: (to be documented)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/xml:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /annotate/_annotate_format_documents:
    post:
      tags:
      - annotate
      summary: annotate documents with multiple annotators and return formatted results
        in a zip
      operationId: annotateFormatDocumentsWithMany
      parameters:
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormatDocumentsWithMany'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/xml:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /annotate/_annotate_format_text:
    post:
      tags:
      - annotate
      summary: annotate a text with multiple annotators and return a formatted result
      operationId: annotateFormatTextWithMany
      parameters:
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormatTextWithMany'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/xml:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /annotate/_annotate_text:
    post:
      tags:
      - annotate
      summary: annotate a text with many annotators
      operationId: annotateTextWithMany
      parameters:
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: outputFields
        in: query
        description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotateTextWithMany'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedDocument'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /annotate/_format_binary:
    post:
      tags:
      - annotate
      summary: annotate a binary document with multiple annotators and return a formatted
        result (replaced with _annotate_format_binary)
      operationId: formatBinary
      parameters:
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormatBinaryForm'
      responses:
        "200":
          description: (to be documented)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/xml:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: true
  /projects/{projectName}/plans/{planName}/_annotate_binary:
    post:
      tags:
      - annotate
      summary: annotate a binary document with multiple annotators
      operationId: annotateBinaryWithPlanRef
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: planName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: outputFields
        in: query
        description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedDocumentArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/plans/{planName}/_annotate_format_binary:
    post:
      tags:
      - annotate
      summary: annotate a binary document with multiple annotators and return a formatted
        result
      operationId: annotateFormatBinaryWithPlanRef
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: planName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: (to be documented)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/xml:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/plans/{planName}/_annotate_format_documents:
    post:
      tags:
      - annotate
      summary: annotate documents with multiple annotators and return formatted results
        in a zip
      operationId: annotateFormatDocumentsWithPlanRef
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: planName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputDocumentArray'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/xml:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/plans/{planName}/_annotate_format_text:
    post:
      tags:
      - annotate
      summary: annotate a text with multiple annotators and return a formatted result
      operationId: annotateFormatTextWithPlanRef
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: planName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: inlineLabels
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineLabelIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: inlineText
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      requestBody:
        description: (to be documented)
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/xml:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      tags:
      - authentication
      summary: Request a bearer token
      operationId: requestJwtToken
      parameters:
      - name: projectFilter
        in: query
        description: "regular expression of project names: will reduce the size of\
          \ the token"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectAccessMode
        in: query
        description: "project access mode (*_annotate*-like endpoints only require\
          \ a read access mode): will reduce the size of the token"
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - read
          - write
          - chmod
      - name: annotateOnly
        in: query
        description: "set true if you only plan to use *_annotate*-like endpoints\
          \ endpoints: will reduce the size of the token"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: loginOnly
        in: query
        description: Only login (don't get a token)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BearerToken'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_generateFacets:
    post:
      tags:
      - projects
      summary: Try to generate meaningful metadata facets based on the current project
        corpus
      operationId: autoDiscoverOnCorpus
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: mode
        in: query
        description: "supported mode are 'PRESERVE', 'APPEND' or 'OVERWRITE'"
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_split_corpus:
    post:
      tags:
      - projects
      summary: split corpus in train and test sets
      operationId: computeTrainTestSplit
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: testSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: incremental
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/dataset:
    get:
      tags:
      - projects
      summary: get the dataset of the project
      operationId: exportDataset
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_export_models:
    post:
      tags:
      - projects
      summary: export models of the project
      operationId: exportModels
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: experiments
        in: query
        description: coma-separated list of experiment names
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: favorite
        in: query
        description: only export models of favorite experiments (ignored when 'experiments'
          parameter is provided)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_export:
    post:
      tags:
      - projects
      summary: export the whole project
      operationId: exportProject
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: includeModels
        in: query
        description: set to false to exclude models from the export (experiment definition
          are still exported)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_flush:
    post:
      tags:
      - projects
      summary: flush search indices of the project
      operationId: flushIndices
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: indices
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: '*'
      - name: timeoutMillis
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1500
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/config:
    get:
      tags:
      - projects
      summary: get the configuration and parameters of the project
      operationId: getConfig
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - projects
      summary: update config options
      operationId: updateConfigOptions
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/ConfigPatchOptions'
        required: true
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/metadata:
    get:
      tags:
      - projects
      summary: get the list of known metadata in this project
      operationId: getMetadataDefinition
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataDefinitionArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_info:
    get:
      tags:
      - projects
      summary: Get project information
      operationId: getProjectInfo
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: computeMetrics
        in: query
        description: True to compute project metrics (such as number of document)
          on each project
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: computeOwner
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: computeEngines
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/properties:
    get:
      tags:
      - projects
      summary: get the properties of the project
      operationId: getProperties
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectProperty'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/gazetteers/_import:
    post:
      tags:
      - projects
      summary: import a gazetteer archive
      operationId: importArchive
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineConfigImportSummary'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_import_models:
    post:
      tags:
      - projects
      summary: import models
      operationId: importModels
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineConfigImportSummary'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/gazetteers/_load:
    post:
      tags:
      - projects
      summary: import a gazetteer archive already uploaded on the server
      operationId: importUploadedArchive
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadedFileArray'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineConfigImportSummary'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_load_models:
    post:
      tags:
      - projects
      summary: import models already uploaded on the server
      operationId: importUploadedModels
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadedFileArray'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineConfigImportSummary'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_reindex:
    post:
      tags:
      - projects
      summary: reindex the project
      operationId: launchProjectReindexing
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: wait
        in: query
        description: "wait before returning (warning: best effort only!)"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_restore:
    post:
      tags:
      - projects
      summary: restore a project from backup
      operationId: launchProjectRestorationFromBackup
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/_load_image:
    post:
      tags:
      - projects
      summary: restore a project from a known image
      operationId: launchProjectRestorationFromImage
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: archiveName
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/documents/{docId}:
    get:
      tags:
      - documents
      summary: Get a specific document
      operationId: getDocument
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: docId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: outputFields
        in: query
        description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: htmlVersion
        in: query
        description: Whether an HTML version should be produced
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - documents
      summary: delete a specific document
      operationId: deleteDocument
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: docId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/documents:
    get:
      tags:
      - documents
      summary: Get documents within project
      operationId: exportDocuments
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: maximum number of documents to return (0 means no limit)
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: outputFields
        in: query
        description: "Output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - documents
      summary: upload documents and launch a job to add them into the project
      operationId: launchDocumentImport
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ignoreLabelling
        in: query
        description: Do not import existing labelling from within documents
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: segmentationPolicy
        in: query
        description: force the computation of new segments
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: compute_if_missing
          enum:
          - always_recompute
          - compute_if_missing
          - no_segmentation
          - documents_as_segments
      - name: splitCorpus
        in: query
        description: dispatch imported documents in train/test after the import
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: cleanText
        in: query
        description: remove HTML tags and emojis (set to false at your own risk!)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: generateCategoriesFromSourceFolder
        in: query
        description: assign categories on text documents according to their source
          folder in the archive
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/documents/_sample:
    post:
      tags:
      - documents
      summary: Get a sample of documents in dataset
      operationId: exportDocumentsSample
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: sampleSize
        in: query
        description: maximum number of documents to return. Value over 1000 are not
          allowed.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 25
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/documents/{docId}/_index:
    post:
      tags:
      - documents
      summary: Index a document already in db
      operationId: indexDocument
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: docId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/documents/_load:
    post:
      tags:
      - documents
      summary: import documents already uploaded on the server into the project
      operationId: launchUploadedDocumentImport
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ignoreLabelling
        in: query
        description: Do not import existing labelling from within documents
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: segmentationPolicy
        in: query
        description: force the computation of new segments
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: compute_if_missing
          enum:
          - always_recompute
          - compute_if_missing
          - no_segmentation
          - documents_as_segments
      - name: splitCorpus
        in: query
        description: dispatch imported documents in train/test after the import
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: cleanText
        in: query
        description: remove HTML tags and emojis (set to false at your own risk!)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: generateCategoriesFromSourceFolder
        in: query
        description: assign categories on text documents according to their source
          folder in the archive
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadedFileArray'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/documents/_search_and_delete:
    post:
      tags:
      - documents
      summary: Search for documents and delete them
      operationId: searchAndDeleteDocuments
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: query
        in: query
        description: the text query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: queryFilter
        in: query
        description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: simpleQuery
        in: query
        description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: outputFields
        in: query
        description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: selectedFacets
        in: query
        description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: ""
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/documents/_search_and_export:
    post:
      tags:
      - documents
      summary: Search for documents and export them
      operationId: searchAndExportDocuments
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: query
        in: query
        description: the text query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: queryFilter
        in: query
        description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: simpleQuery
        in: query
        description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: outputFields
        in: query
        description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: selectedFacets
        in: query
        description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: ""
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/documents/_search_and_tag:
    post:
      tags:
      - documents
      summary: Search for documents and set a metadata value on them
      operationId: searchAndTagDocuments
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: query
        in: query
        description: the text query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: queryFilter
        in: query
        description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: simpleQuery
        in: query
        description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: outputFields
        in: query
        description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: selectedFacets
        in: query
        description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: ""
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleMetadata'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/documents/_search:
    post:
      tags:
      - documents
      summary: Search for documents
      operationId: searchDocuments
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: query
        in: query
        description: the text query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: from
        in: query
        description: offset from the first result you want to fetch
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        description: maximum amount of hits to be returned
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: highlight
        in: query
        description: highlight query terms
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: facet
        in: query
        description: activate faceted search results
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: queryFilter
        in: query
        description: "an optional lucene query string to filter on, i.e: '+annotations:*'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: outputFields
        in: query
        description: "output fields (e.g. 'annotations,categories' or '!text,!metadata'"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: simpleQuery
        in: query
        description: "use the simple query syntax that is more user-friendly. If set\
          \ to false, the full lucene syntax will be used, but syntax error could\
          \ occurs (for advanced users only)"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: selectedFacets
        in: query
        description: "an optional comma-separated list of 'facet:value' to filter\
          \ on, i.e: 'source:nytimes,tag:polictics'"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: "0"
      - name: htmlVersion
        in: query
        description: Whether an HTML version should be produced
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentHits'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/documents/_tag:
    post:
      tags:
      - documents
      summary: set a metadata value on a document
      operationId: setMetadataOnDocument
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: identifier
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleMetadata'
        required: true
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /jobs/{job_id}:
    get:
      tags:
      - jobs
      summary: Get global job information
      operationId: getGlobalJob
      parameters:
      - name: job_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - jobs
      summary: cancel global job
      operationId: cancelGlobalJob
      parameters:
      - name: job_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects:
    get:
      tags:
      - projects
      summary: Get projects
      operationId: getProjects
      parameters:
      - name: computeMetrics
        in: query
        description: True to compute project metrics (such as number of document)
          on each project
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: computeOwners
        in: query
        description: True to compute owners and groups of the project
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: computeEngines
        in: query
        description: True to compute engines and algorithms used in the project
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: groupName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: username
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectBeanArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - projects
      summary: create an empty project
      operationId: createProject
      parameters:
      - name: groupName
        in: query
        description: users' group of the project (leave empty if you only belong to
          one group)
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectConfigCreation'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatus'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/_import:
    post:
      tags:
      - projects
      summary: create a project from an archive
      operationId: createProjectFromArchive
      parameters:
      - name: groupName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: reuseProjectName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: projectName
        in: query
        description: Name of the project to create. If empty then the original name
          from the archive will be used instead
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectLabel
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/_load:
    post:
      tags:
      - projects
      summary: create a project from an already uploaded archive
      operationId: createProjectFromUploadedArchive
      parameters:
      - name: groupName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: reuseProjectName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: projectName
        in: query
        description: Name of the project to create. If empty then the original name
          from the archive will be used instead
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectLabel
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadedFile'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/_start_tour:
    post:
      tags:
      - projects
      summary: create a specific tour project for the current user
      operationId: createTourProject
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatus'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}:
    delete:
      tags:
      - projects
      summary: delete a project
      operationId: deleteProject
      parameters:
      - name: projectName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/_stop_tour:
    post:
      tags:
      - projects
      summary: stop and remove the tour for the current user
      operationId: deleteTourProject
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatus'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/_deploy:
    post:
      tags:
      - projects
      summary: deploy an already existing project
      operationId: deployProject
      parameters:
      - name: projectName
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatus'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /jobs:
    get:
      tags:
      - jobs
      summary: Get jobs of all projects and global jobs
      operationId: getAllJobs
      parameters:
      - name: statusFilter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBeanArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /app_state:
    get:
      tags:
      - projects
      summary: return the app cached state (internal use only)
      operationId: getAppState
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                type: object
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/_import_models:
    post:
      tags:
      - projects
      summary: import models (and create projects if required)
      operationId: maybeCreateProjectsAndImportModelsFromArchive
      parameters:
      - name: groupName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: reuseProjectName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: projectName
        in: query
        description: Name of the project to create. If empty then the original name
          from the archive will be used instead
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectLabel
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatusArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/_reindex:
    post:
      tags:
      - projects
      summary: reindex all projects
      operationId: reindexProjects
      parameters:
      - name: wait
        in: query
        description: "wait before returning (warning: best effort only!)"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/_undeploy:
    post:
      tags:
      - projects
      summary: undeploy a running project
      operationId: undeployProject
      parameters:
      - name: projectName
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/experiments/{name}/_cancel:
    post:
      tags:
      - experiments
      summary: Launch an experiment
      operationId: cancelExperiment
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/experiments/_label_hint:
    post:
      tags:
      - experiments
      summary: Get a somehow unique experiment label generated after the provided
        experiment label
      operationId: computeExperimentLabelHint
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputLabel'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedLabelHint'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/experiments:
    get:
      tags:
      - experiments
      summary: List experiments
      operationId: getExperiments
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - experiments
      summary: Create an experiment
      operationId: createExperiment
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExperiment'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineName'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - experiments
      summary: Delete experiments
      operationId: deleteExperiments
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: names
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/experiments/{name}:
    get:
      tags:
      - experiments
      summary: Get an experiment
      operationId: getExperiment
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - experiments
      summary: Delete an experiment
      operationId: deleteExperiment
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - experiments
      summary: Partially update an experiment
      operationId: patchExperiment
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/ExperimentPatch'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/experiments/{name}/_launch:
    post:
      tags:
      - experiments
      summary: Launch an experiment
      operationId: launchExperiment
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /roles:
    get:
      tags:
      - roles
      summary: Get roles
      operationId: getRoles
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDescArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - roles
      summary: Create role
      operationId: addRole
      parameters:
      - name: groupName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: restricted
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRole'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDesc'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /roles/{rolename}:
    get:
      tags:
      - roles
      summary: Get role
      operationId: getRole
      parameters:
      - name: rolename
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDesc'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - roles
      summary: Delete role
      operationId: deleteRole
      parameters:
      - name: rolename
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - roles
      summary: Update role
      operationId: updateRole
      parameters:
      - name: rolename
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/RoleUpdate'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /permissions:
    get:
      tags:
      - roles
      summary: Get available permissions
      operationId: getPermissions
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups:
    get:
      tags:
      - groups
      summary: Get users' groups
      operationId: getGroups
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDescArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - groups
      summary: Add a users' group
      operationId: addGroup
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroupDesc'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupName'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{groupName}:
    get:
      tags:
      - groups
      summary: Get a users' group
      operationId: getGroup
      parameters:
      - name: groupName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDesc'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - groups
      summary: Delete users' group
      operationId: deleteGroup
      parameters:
      - name: groupName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: cascade
        in: query
        description: set to true to delete projects and users
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteGroupResult'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - groups
      summary: Update a users' group
      operationId: patchGroup
      parameters:
      - name: groupName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/GroupPatch'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/models:
    delete:
      tags:
      - models
      summary: delete all known models
      operationId: deleteModels
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/labels:
    get:
      tags:
      - labels
      summary: Get labels
      operationId: getLabels
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: includeCount
        in: query
        description: compute occurrence count for each label?
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - labels
      summary: Create a label
      operationId: createLabel
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialLabel'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/labels/{labelName}:
    put:
      tags:
      - labels
      summary: Update a label
      operationId: updateLabel
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: labelName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelUpdate'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - labels
      summary: Remove label by name
      operationId: deleteLabelByName
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: labelName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/job/{job_id}:
    get:
      tags:
      - jobs
      summary: Get job information
      operationId: getJob
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: job_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - jobs
      summary: cancel job
      operationId: cancelJob
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: job_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/jobs:
    get:
      tags:
      - jobs
      summary: Get current jobs
      operationId: getJobs
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: statusFilter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBeanArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/job:
    post:
      tags:
      - jobs
      summary: create a dummy job
      operationId: launchDummyJob
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: job_desc
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: All work and no play makes Jack a dull boy
      - name: timeout
        in: query
        description: for how long (in seconds) this job will (virtually) run
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 60
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/job/{job_id}/_wait:
    post:
      tags:
      - jobs
      summary: Wait for the job to end before returning job information
      operationId: waitForJob
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: job_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/gazetteers/{name}/_cancel_synchronize:
    post:
      tags:
      - gazetteers
      summary: "cancel the current synchronization, if any"
      operationId: cancelSynchronizeGazetteer
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: (to be documented)
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/gazetteers/_label_hint:
    post:
      tags:
      - gazetteers
      summary: Get a somehow unique gazetteer label generated after the provided gazetteer
        label
      operationId: computeGazetteerLabelHint
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputLabel'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedLabelHint'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/gazetteers:
    get:
      tags:
      - gazetteers
      summary: List gazetteers
      operationId: getGazetteers
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GazetteerArray'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - gazetteers
      summary: Create a gazetteer
      operationId: createGazetteer
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGazetteer'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineName'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - gazetteers
      summary: Delete gazetteers
      operationId: deleteGazetteers
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: names
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/gazetteers/{name}:
    get:
      tags:
      - gazetteers
      summary: Get a gazetteer
      operationId: getGazetteer
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gazetteer'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - gazetteers
      summary: Delete a gazetteer
      operationId: deleteGazetteer
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - gazetteers
      summary: Partially update a gazetteer
      operationId: patchGazetteer
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: (to be documented)
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/GazetteerPatch'
        required: true
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gazetteer'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/gazetteers/{name}/_export:
    post:
      tags:
      - gazetteers
      summary: export the gazetteer
      operationId: exportGazetteer
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/gazetteers/_export:
    post:
      tags:
      - gazetteers
      summary: export gazetteers from the project
      operationId: exportGazetteers
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: gazetteers
        in: query
        description: coma-separated list of gazetteers to export
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectName}/gazetteers/{name}/_synchronize:
    post:
      tags:
      - gazetteers
      summary: Launch a synchronize
      operationId: synchronizeGazetteer
      parameters:
      - name: projectName
        in: path
        description: project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SherpaJobBean'
        "404":
          description: no such element
        default:
          description: (to be documented)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      required:
      - code
      - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    UploadedFileInfo:
      required:
      - id
      type: object
      properties:
        id:
          type: string
      additionalProperties: false
    UploadedFile:
      required:
      - filename
      - id
      type: object
      properties:
        filename:
          type: string
        id:
          type: string
        contentType:
          type: string
      additionalProperties: false
    UploadedFileArray:
      type: array
      items:
        $ref: '#/components/schemas/UploadedFile'
    AnnotationMetrics:
      required:
      - annotationCount
      - annotationFacets
      - documentFacets
      - documentsInDataset
      - segmentsInDataset
      - suggestionCount
      - suggestionFacets
      type: object
      properties:
        annotationCount:
          type: integer
          format: int32
        suggestionCount:
          type: integer
          format: int32
        annotationFacets:
          $ref: '#/components/schemas/AnnotationFacets'
        suggestionFacets:
          $ref: '#/components/schemas/SuggestionFacets'
        documentsInDataset:
          type: integer
          format: int32
        segmentsInDataset:
          type: integer
          format: int32
        documentFacets:
          $ref: '#/components/schemas/DocumentFacets'
      additionalProperties: false
    LabelCount:
      required:
      - _id
      - count
      type: object
      properties:
        _id:
          type: string
        count:
          type: integer
          format: int32
      additionalProperties: false
    TextCount:
      required:
      - _id
      - count
      type: object
      properties:
        _id:
          type: string
        count:
          type: integer
          format: int32
      additionalProperties: false
    AnnotationFacets:
      required:
      - labels
      - texts
      type: object
      properties:
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LabelCount'
        texts:
          type: array
          items:
            $ref: '#/components/schemas/TextCount'
      additionalProperties: false
    SuggestionFacets:
      required:
      - labels
      - texts
      type: object
      properties:
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LabelCount'
        texts:
          type: array
          items:
            $ref: '#/components/schemas/TextCount'
      additionalProperties: false
    MetadataCount:
      required:
      - _id
      - documentCount
      - segmentCount
      type: object
      properties:
        _id:
          type: string
        documentCount:
          type: integer
          format: int32
        segmentCount:
          type: integer
          format: int32
      additionalProperties: false
    DocumentFacets:
      required:
      - facets
      - metadata
      type: object
      properties:
        metadata:
          type: string
        facets:
          type: array
          items:
            $ref: '#/components/schemas/MetadataCount'
      additionalProperties: false
    CategoryMetrics:
      required:
      - categoriesCount
      - categoriesFacets
      - documentFacets
      - documentsInDataset
      type: object
      properties:
        categoriesCount:
          type: integer
          format: int32
        categoriesFacets:
          $ref: '#/components/schemas/CategoriesFacets'
        documentsInDataset:
          type: integer
          format: int32
        documentFacets:
          $ref: '#/components/schemas/DocumentFacets'
      additionalProperties: false
    CategoriesFacets:
      required:
      - labels
      type: object
      properties:
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LabelCount'
      additionalProperties: false
    CorpusMetrics:
      required:
      - corpusSize
      - documentCount
      - documentFacets
      - segmentCount
      type: object
      properties:
        documentCount:
          type: integer
          format: int32
        segmentCount:
          type: integer
          format: int32
        corpusSize:
          type: integer
          format: int32
        documentFacets:
          $ref: '#/components/schemas/DocumentFacets'
      additionalProperties: false
    ModelsMetrics:
      required:
      - history
      type: object
      properties:
        best:
          $ref: '#/components/schemas/ModelMetrics'
        last:
          $ref: '#/components/schemas/ModelMetrics'
        history:
          type: array
          items:
            $ref: '#/components/schemas/ModelMetrics'
      additionalProperties: false
    QualityFigures:
      required:
      - f1
      - precision
      - recall
      - support
      type: object
      properties:
        precision:
          type: number
          format: float
        recall:
          type: number
          format: float
        f1:
          type: number
          format: float
        support:
          type: integer
          format: int32
        roc_auc:
          type: number
          format: float
      additionalProperties: false
    EngineConfig:
      required:
      - name
      - type
      type: object
      properties:
        type:
          type: string
        name:
          type: string
      additionalProperties: false
    Report:
      required:
      - classes
      - microAvg
      type: object
      properties:
        classes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/QualityFigures'
        microAvg:
          $ref: '#/components/schemas/QualityFigures'
        macroAvg:
          $ref: '#/components/schemas/QualityFigures'
        weightedAvg:
          $ref: '#/components/schemas/QualityFigures'
        samplesAvg:
          $ref: '#/components/schemas/QualityFigures'
        config:
          $ref: '#/components/schemas/EngineConfig'
      additionalProperties: false
    ModelMetrics:
      required:
      - classes
      - config
      - engine
      - lang
      - name
      - options
      - quality
      - report
      - status
      - timestamp
      - timestamp_end
      type: object
      properties:
        name:
          type: string
        lang:
          type: string
        timestamp:
          type: integer
          format: int64
        timestamp_end:
          type: integer
          format: int64
        quality:
          type: number
          format: float
        status:
          type: string
        engine:
          type: string
        options:
          type: object
        classes:
          type: array
          items:
            type: string
        report:
          $ref: '#/components/schemas/Report'
        config:
          $ref: '#/components/schemas/EngineConfig'
      additionalProperties: false
    InputLabel:
      required:
      - label
      type: object
      properties:
        label:
          type: string
      additionalProperties: false
    GeneratedLabelHint:
      required:
      - labelHint
      type: object
      properties:
        labelHint:
          type: string
      additionalProperties: false
    NamedAnnotationPlan:
      required:
      - label
      - name
      - parameters
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        createdAt:
          type: string
        createdBy:
          type: string
        modifiedBy:
          type: string
        modifiedAt:
          type: string
        favorite:
          type: boolean
        parameters:
          $ref: '#/components/schemas/AnnotationPlan'
      additionalProperties: false
    Converter:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the converter (e.g. tika)
        parameters:
          type: object
          description: Optional conversion parameters
      additionalProperties: false
    WithAnnotator:
      required:
      - annotator
      type: object
      properties:
        disabled:
          type: boolean
        projectName:
          type: string
        annotator:
          type: string
        parameters:
          type: object
        condition:
          type: object
      additionalProperties: false
    Formatter:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the formatter (e.g. tabular)
        parameters:
          type: object
          description: Optional formatting parameters
      additionalProperties: false
    WithProcessor:
      required:
      - processor
      type: object
      properties:
        disabled:
          type: boolean
        processor:
          type: string
        parameters:
          type: object
        condition:
          type: object
      additionalProperties: false
    AnnotationPlan:
      required:
      - pipeline
      type: object
      properties:
        converter:
          $ref: '#/components/schemas/Converter'
        pipeline:
          type: array
          items:
            description: Annotation pipeline to be applied
            oneOf:
            - $ref: '#/components/schemas/WithAnnotator'
            - $ref: '#/components/schemas/WithProcessor'
        formatter:
          $ref: '#/components/schemas/Formatter'
      additionalProperties: false
    NewNamedAnnotationPlan:
      required:
      - label
      - parameters
      type: object
      properties:
        label:
          type: string
        parameters:
          $ref: '#/components/schemas/AnnotationPlan'
      additionalProperties: false
    EngineName:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
    DeleteResponse:
      required:
      - removedCount
      type: object
      properties:
        removedCount:
          type: integer
          format: int32
        removeJob:
          $ref: '#/components/schemas/SherpaJobBean'
      additionalProperties: false
    JobType:
      type: object
      properties: {}
      additionalProperties: false
    JobStatus:
      type: object
      properties: {}
      additionalProperties: false
    SherpaJobBean:
      required:
      - createdAt
      - createdBy
      - currentStepCount
      - description
      - id
      - project
      - projectLabel
      - status
      - totalStepCount
      - type
      - uploadIds
      type: object
      properties:
        project:
          type: string
        projectLabel:
          type: string
        id:
          type: string
        type:
          type: string
          enum:
          - DOC_IMPORT
          - EXPERIMENT_TRAINING
          - DOC_DELETION
          - CORPUS_ANNOTATE
          - TRAIN_AND_SUGGEST
          - UNSPECIFIED
          - PROJECT_INDEXING
          - PROJECTS_INDEXING
          - PROJECT_RESTORATION
          - DELETE_LABELS
          - PROCESS_CANDIDATES
          - SYNCHRONIZE_TERMS
          - TERM_IMPORT
        uploadIds:
          type: array
          items:
            type: string
        description:
          type: string
        status:
          type: string
          enum:
          - STARTED
          - PAUSED
          - CANCELLED
          - FAILED
          - COMPLETED
        statusMessage:
          type: string
        createdAt:
          type: integer
          format: int64
        completedAt:
          type: integer
          format: int64
        createdBy:
          type: string
        totalStepCount:
          type: integer
          format: int64
        currentStepCount:
          type: integer
          format: int64
      additionalProperties: false
    PlanPatch:
      type: object
      properties:
        label:
          type: string
        favorite:
          type: boolean
        parameters:
          $ref: '#/components/schemas/AnnotationPlan'
      additionalProperties: false
    NamedAnnotationPlanArray:
      type: array
      items:
        $ref: '#/components/schemas/NamedAnnotationPlan'
    NewSuggester:
      required:
      - engine
      - label
      - parameters
      type: object
      properties:
        engine:
          type: string
        label:
          type: string
        parameters:
          type: object
      additionalProperties: false
    Suggester:
      required:
      - duration
      - engine
      - label
      - models
      - name
      - parameters
      - quality
      - running
      - timestamp
      - uptodate
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        engine:
          type: string
        running:
          type: boolean
        quality:
          type: integer
          format: int32
        timestamp:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        uptodate:
          type: boolean
        models:
          type: integer
          format: int32
        parameters:
          type: object
      additionalProperties: false
    SuggesterPatch:
      type: object
      properties:
        label:
          type: string
        parameters:
          type: object
      additionalProperties: false
    Ack:
      required:
      - ok
      type: object
      properties:
        ok:
          type: boolean
      additionalProperties: false
    SuggesterArray:
      type: array
      items:
        $ref: '#/components/schemas/Suggester'
    OperationCount:
      required:
      - count
      - operation
      - unit
      type: object
      properties:
        operation:
          type: string
          description: Name of the operation
        unit:
          type: string
          description: Element unit of the operation
        count:
          type: integer
          description: Number of elements affected by the operation
          format: int64
      additionalProperties: false
      description: Annotation creation response
    HttpServiceRecord:
      required:
      - host
      - metadata
      - name
      - port
      type: object
      properties:
        name:
          type: string
        ssl:
          type: boolean
        host:
          type: string
        port:
          type: integer
          format: int32
        metadata:
          $ref: '#/components/schemas/HttpServiceMetadata'
      additionalProperties: false
    HttpServiceMetadata:
      required:
      - api
      - compatibility
      - version
      type: object
      properties:
        api:
          type: string
        version:
          type: string
        compatibility:
          type: string
        languages:
          type: string
        functions:
          type: string
        termImporters:
          type: string
        extensions:
          type: string
        converters:
          type: string
        formatters:
          type: string
        processors:
          type: string
        annotators:
          type: string
        engine:
          type: string
        natures:
          type: string
        trigger:
          type: string
        operations:
          type: object
      additionalProperties: false
    HttpServiceRecordArray:
      type: array
      items:
        $ref: '#/components/schemas/HttpServiceRecord'
    CreatedByCount:
      required:
      - count
      - createdBy
      type: object
      properties:
        count:
          type: integer
          format: int32
        createdBy:
          type: string
      additionalProperties: false
    Annotation:
      required:
      - documentIdentifier
      - end
      - labelName
      - start
      - text
      type: object
      properties:
        documentIdentifier:
          type: string
          description: The document identifier
        labelName:
          type: string
          description: The label name
        start:
          type: integer
          description: Start offset in document
          format: int32
        end:
          type: integer
          description: End offset in document
          format: int32
        text:
          type: string
          description: Covered text
        status:
          type: string
          description: Status of the annotation
          enum:
          - OK
          - KO
      additionalProperties: false
      description: A document annotation
    AnnotationId:
      required:
      - identifier
      type: object
      properties:
        identifier:
          type: string
          description: Identifier of the new annotation
      additionalProperties: false
      description: Annotation creation response
    CreatedByCountArray:
      type: array
      items:
        $ref: '#/components/schemas/CreatedByCount'
    InputDocument:
      required:
      - text
      type: object
      properties:
        identifier:
          type: string
          description: document identifier
        title:
          type: string
          description: title of the document
        text:
          type: string
          description: text of the document
        metadata:
          type: object
          description: document metadata
        sentences:
          type: array
          items:
            $ref: '#/components/schemas/DocSentence'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/DocCategory'
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/DocAnnotation'
      additionalProperties: false
    DocSentence:
      required:
      - end
      - start
      type: object
      properties:
        start:
          type: integer
          format: int32
        end:
          type: integer
          format: int32
      additionalProperties: false
    DocCategory:
      required:
      - labelName
      type: object
      properties:
        identifier:
          type: string
          description: Category identifier
        labelName:
          type: string
          description: The label name
        score:
          type: number
          description: Score of the category
          format: double
        status:
          type: string
          description: Status of the category
          enum:
          - OK
          - KO
        createdDate:
          type: string
          description: Creation date
        modifiedDate:
          type: string
          description: Last modification date
        createdBy:
          type: string
          description: User having created the category
      additionalProperties: false
      description: A document category
    DocAnnotation:
      required:
      - end
      - labelName
      - start
      - text
      type: object
      properties:
        identifier:
          type: string
          description: Annotation identifier (only in 'html version')
        labelName:
          type: string
          description: The label name
        start:
          type: integer
          description: Start offset in document
          format: int32
        end:
          type: integer
          description: End offset in document
          format: int32
        text:
          type: string
          description: Covered text
        status:
          type: string
          description: Status of the annotation
          enum:
          - OK
          - KO
        createdDate:
          type: string
          description: Creation date
        modifiedDate:
          type: string
          description: Last modification date
        createdBy:
          type: string
          description: User having created the annotation
      additionalProperties: false
      description: A document annotation
    AnnotatedDocument:
      required:
      - text
      type: object
      properties:
        identifier:
          type: string
          description: document identifier (externally provided or generated by sherpa)
        title:
          type: string
          description: document title
        text:
          type: string
          description: text of the document
        metadata:
          type: object
          description: document metadata
        sentences:
          type: array
          items:
            $ref: '#/components/schemas/DocSentence'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedDocCategory'
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedDocAnnotation'
      additionalProperties: false
    AnnotatedDocCategory:
      required:
      - labelName
      type: object
      properties:
        labelId:
          type: string
          description: External label identifier
        label:
          type: string
          description: Human-friendly label
        labelName:
          type: string
          description: Label name
        score:
          type: number
          description: Score of the category
          format: double
        properties:
          type: object
          description: Additional properties
      additionalProperties: false
      description: A document category
    AnnotationTerm:
      required:
      - identifier
      - lexicon
      type: object
      properties:
        identifier:
          type: string
          description: Annotation identifier (only in 'html version')
        lexicon:
          type: string
          description: Lexicon of the term
        preferredForm:
          type: string
          description: Preferred form of the term
        score:
          type: integer
          description: Score of the term
          format: int32
        properties:
          type: object
          description: Properties of the term
      additionalProperties: false
      description: A term
    AnnotatedDocAnnotation:
      required:
      - end
      - labelName
      - start
      - text
      type: object
      properties:
        labelId:
          type: string
          description: External label identifier
        label:
          type: string
          description: Human-friendly label
        labelName:
          type: string
          description: Label name
        start:
          type: integer
          description: Start offset in document
          format: int32
        end:
          type: integer
          description: End offset in document
          format: int32
        score:
          type: number
          description: Score of the annotation
          format: double
        text:
          type: string
          description: Covered text
        properties:
          type: object
          description: Additional properties
        terms:
          type: array
          items:
            $ref: '#/components/schemas/AnnotationTerm'
      additionalProperties: false
      description: A document annotation
    InputDocumentArray:
      type: array
      items:
        $ref: '#/components/schemas/InputDocument'
    AnnotatedDocumentArray:
      type: array
      items:
        $ref: '#/components/schemas/AnnotatedDocument'
    GroupShare:
      required:
      - canRevoke
      - groupName
      - mode
      type: object
      properties:
        groupName:
          type: string
        mode:
          $ref: '#/components/schemas/ShareMode'
        canRevoke:
          type: boolean
      additionalProperties: false
    ShareMode:
      required:
      - read
      - write
      type: object
      properties:
        read:
          type: boolean
        write:
          type: boolean
      additionalProperties: false
    GroupShareArray:
      type: array
      items:
        $ref: '#/components/schemas/GroupShare'
    PartialLexicon:
      required:
      - label
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        color:
          type: string
      additionalProperties: false
    Term:
      required:
      - identifier
      type: object
      properties:
        identifier:
          type: string
      additionalProperties: false
    Lexicon:
      required:
      - color
      - label
      - manualEditionAllowed
      - name
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        color:
          type: string
        manualEditionAllowed:
          type: boolean
          description: (unstable)
        terms:
          type: integer
          format: int32
        createdBy:
          type: string
        createdAt:
          type: string
        modifiedBy:
          type: string
        modifiedAt:
          type: string
      additionalProperties: false
    TermImport:
      required:
      - files
      - importer
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/UploadedFile'
        importer:
          $ref: '#/components/schemas/TermImporterSpec'
      additionalProperties: false
    TermImporterSpec:
      required:
      - format
      - parameters
      type: object
      properties:
        format:
          type: string
        parameters:
          type: object
      additionalProperties: false
    TermHits:
      required:
      - hits
      - total
      type: object
      properties:
        total:
          $ref: '#/components/schemas/SearchTotal'
        max_score:
          type: number
          format: float
        hits:
          type: array
          items:
            $ref: '#/components/schemas/TermHit'
      additionalProperties: false
    Relation:
      type: object
      properties: {}
      additionalProperties: false
    SearchTotal:
      required:
      - relation
      - value
      type: object
      properties:
        value:
          type: integer
          format: int32
        relation:
          type: string
          enum:
          - eq
          - gte
      additionalProperties: false
    TermHit:
      required:
      - score
      - term
      type: object
      properties:
        score:
          type: number
          format: float
        term:
          type: object
      additionalProperties: false
    LexiconUpdate:
      type: object
      properties:
        label:
          type: string
        color:
          type: string
      additionalProperties: false
    LexiconArray:
      type: array
      items:
        $ref: '#/components/schemas/Lexicon'
    NewUser:
      required:
      - password
      - permissions
      - roles
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        permissions:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
      additionalProperties: false
    UserResponse:
      required:
      - profilename
      - username
      type: object
      properties:
        username:
          type: string
        profilename:
          type: string
        permissions:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
        groups:
          type: array
          items:
            type: string
        defaultGroup:
          type: string
        createdBy:
          type: string
        createdAt:
          type: string
      additionalProperties: false
    UserPermissionsUpdate:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
      additionalProperties: false
    UserProfileUpdate:
      type: object
      properties:
        profilename:
          type: string
        password:
          type: string
      additionalProperties: false
    UserResponseArray:
      type: array
      items:
        $ref: '#/components/schemas/UserResponse'
    Category:
      required:
      - documentIdentifier
      - labelName
      type: object
      properties:
        documentIdentifier:
          type: string
          description: identifier of the document
        labelName:
          type: string
          description: The label name
        score:
          type: number
          description: Score of the category
          format: double
        status:
          type: string
          description: Status of the category
          enum:
          - OK
          - KO
      additionalProperties: false
      description: A document category
    CategoryId:
      required:
      - identifier
      type: object
      properties:
        identifier:
          type: string
      additionalProperties: false
    SegmentHits:
      required:
      - hits
      - total
      type: object
      properties:
        total:
          $ref: '#/components/schemas/SearchTotal'
        max_score:
          type: number
          format: float
        hits:
          type: array
          items:
            $ref: '#/components/schemas/SegmentHit'
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/Aggregation'
      additionalProperties: false
    Segment:
      required:
      - documentIdentifier
      - documentTitle
      - end
      - identifier
      - start
      - text
      type: object
      properties:
        identifier:
          type: string
        documentIdentifier:
          type: string
        documentTitle:
          type: string
        text:
          type: string
        start:
          type: integer
          format: int32
        end:
          type: integer
          format: int32
        shift:
          type: integer
          format: int32
        metadata:
          type: object
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/DocAnnotation'
        createdDate:
          type: string
          description: Creation date
        modifiedDate:
          type: string
          description: Last modification date
        createdBy:
          type: string
          description: User having created the segment
      additionalProperties: false
    SegmentHit:
      required:
      - _id
      - score
      - segment
      type: object
      properties:
        score:
          type: number
          format: float
        _id:
          type: string
        segment:
          $ref: '#/components/schemas/Segment'
      additionalProperties: false
    Bucket:
      required:
      - doc_count
      - key
      type: object
      properties:
        key:
          type: string
        doc_count:
          type: integer
          format: int32
      additionalProperties: false
    Aggregation:
      required:
      - buckets
      - name
      type: object
      properties:
        name:
          type: string
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/Bucket'
      additionalProperties: false
    SegmentContexts:
      required:
      - after
      - before
      type: object
      properties:
        before:
          $ref: '#/components/schemas/SegmentContext'
        after:
          $ref: '#/components/schemas/SegmentContext'
      additionalProperties: false
    SegmentContext:
      required:
      - size
      type: object
      properties:
        size:
          type: integer
          format: int32
        segments:
          type: array
          items:
            $ref: '#/components/schemas/Segment'
        merged:
          $ref: '#/components/schemas/Segment'
      additionalProperties: false
    Annotator:
      required:
      - engine
      - favorite
      - label
      - name
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        engine:
          type: string
        isDefault:
          type: boolean
        favorite:
          type: boolean
      additionalProperties: false
    AnnotatorMultimap:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: '#/components/schemas/Annotator'
    AnnotateBinaryForm:
      type: object
      properties:
        file:
          type: string
          description: ' binary file to be converted and annotated'
          format: binary
        plan:
          $ref: '#/components/schemas/ConvertAnnotationPlan'
      additionalProperties: false
    ConvertAnnotationPlan:
      required:
      - converter
      - pipeline
      type: object
      properties:
        converter:
          $ref: '#/components/schemas/Converter'
        pipeline:
          type: array
          items:
            description: Annotation pipeline to be applied
            oneOf:
            - $ref: '#/components/schemas/WithAnnotator'
            - $ref: '#/components/schemas/WithProcessor'
      additionalProperties: false
    AnnotateDocumentsWithMany:
      required:
      - documents
      - pipeline
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/InputDocument'
        pipeline:
          type: array
          items:
            description: Annotation pipeline to be applied
            oneOf:
            - $ref: '#/components/schemas/WithAnnotator'
            - $ref: '#/components/schemas/WithProcessor'
      additionalProperties: false
    FormatBinaryForm:
      type: object
      properties:
        file:
          type: string
          description: ' binary file to be converted and annotated'
          format: binary
        plan:
          $ref: '#/components/schemas/ConvertFormatAnnotationPlan'
      additionalProperties: false
    ConvertFormatAnnotationPlan:
      required:
      - converter
      - formatter
      - pipeline
      type: object
      properties:
        converter:
          $ref: '#/components/schemas/Converter'
        pipeline:
          type: array
          items:
            description: Annotation pipeline to be applied
            oneOf:
            - $ref: '#/components/schemas/WithAnnotator'
            - $ref: '#/components/schemas/WithProcessor'
        formatter:
          $ref: '#/components/schemas/Formatter'
      additionalProperties: false
    FormatDocumentsWithMany:
      required:
      - documents
      - formatter
      - pipeline
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/InputDocument'
        pipeline:
          type: array
          items:
            description: Annotation pipeline to be applied
            oneOf:
            - $ref: '#/components/schemas/WithAnnotator'
            - $ref: '#/components/schemas/WithProcessor'
        formatter:
          $ref: '#/components/schemas/Formatter'
      additionalProperties: false
    FormatTextWithMany:
      required:
      - formatter
      - pipeline
      - text
      type: object
      properties:
        text:
          type: string
        pipeline:
          type: array
          items:
            description: Annotation pipeline to be applied
            oneOf:
            - $ref: '#/components/schemas/WithAnnotator'
            - $ref: '#/components/schemas/WithProcessor'
        formatter:
          $ref: '#/components/schemas/Formatter'
      additionalProperties: false
    AnnotateTextWithMany:
      required:
      - pipeline
      - text
      type: object
      properties:
        text:
          type: string
          description: Text to be annotated
        pipeline:
          type: array
          items:
            description: Annotation pipeline to be applied
            oneOf:
            - $ref: '#/components/schemas/WithAnnotator'
            - $ref: '#/components/schemas/WithProcessor'
      additionalProperties: false
    Credentials:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      additionalProperties: false
    BearerToken:
      required:
      - access_token
      - email
      type: object
      properties:
        email:
          type: string
        access_token:
          type: string
      additionalProperties: false
    ProjectBean:
      required:
      - image
      - label
      - lang
      - name
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        description:
          type: string
        image:
          type: string
        lang:
          type: string
        version:
          type: string
        documents:
          type: integer
          format: int32
        segments:
          type: integer
          format: int32
        annotations:
          type: integer
          format: int32
        categories:
          type: integer
          format: int32
        nature:
          type: string
        createdBy:
          type: string
        createdDate:
          type: string
        owner:
          type: string
        groupName:
          type: string
        shared:
          type: boolean
        readOnly:
          type: boolean
        private:
          type: boolean
        engines:
          type: array
          items:
            type: string
        algorithms:
          type: array
          items:
            type: string
        metafacets:
          type: array
          items: {}
        classification:
          $ref: '#/components/schemas/ClassificationConfig'
      additionalProperties: false
    ClassificationConfig:
      required:
      - exclusive_classes
      type: object
      properties:
        exclusive_classes:
          type: boolean
      additionalProperties: false
    MetadataDefinition:
      required:
      - metadata
      type: object
      properties:
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/MetadataDefinitionEntry'
      additionalProperties: false
    MetadataDefinitionEntry:
      required:
      - distinctMetadataValues
      - isEditable
      - isMultiple
      - metadataName
      type: object
      properties:
        metadataName:
          type: string
        isEditable:
          type: boolean
        isMultiple:
          type: boolean
        distinctMetadataValues:
          type: array
          items:
            type: string
      additionalProperties: false
    ProjectProperty:
      type: object
      properties:
        name:
          type: string
          default: value
      additionalProperties: false
    EngineConfigImportSummary:
      type: object
      properties:
        configs:
          type: array
          items:
            type: string
            description: engine configs that will be imported
        models:
          type: integer
          description: number of models that will be imported
          format: int32
          default: 0
        ignored:
          type: array
          items:
            type: string
            description: engine configs that will not be imported (already exist)
            default: "0"
        pendingJob:
          $ref: '#/components/schemas/SherpaJobBean'
      additionalProperties: false
    ConfigPatchOptions:
      type: object
      properties:
        classification:
          $ref: '#/components/schemas/ClassificationOptions'
        label:
          type: string
        metafacets:
          type: array
          items:
            type: string
        image:
          type: string
      additionalProperties: false
    ClassificationOptions:
      type: object
      properties:
        exclusive_classes:
          type: boolean
          default: true
      additionalProperties: false
    SegmentArray:
      type: array
      items:
        $ref: '#/components/schemas/Segment'
    MetadataDefinitionArray:
      type: array
      items:
        $ref: '#/components/schemas/MetadataDefinition'
    Document:
      required:
      - identifier
      - text
      - title
      type: object
      properties:
        identifier:
          type: string
          description: document identifier (externally provided or generated by sherpa)
        title:
          type: string
          description: title of the document
        text:
          type: string
          description: text of the document
        metadata:
          type: object
          description: document metadata
        sentences:
          type: array
          items:
            $ref: '#/components/schemas/DocSentence'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/DocCategory'
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/DocAnnotation'
        createdDate:
          type: string
          description: Creation date
        modifiedDate:
          type: string
          description: Last modification date
        createdBy:
          type: string
          description: User having created the document
      additionalProperties: false
    SimpleMetadata:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      additionalProperties: false
    DocumentHits:
      required:
      - hits
      - total
      type: object
      properties:
        total:
          $ref: '#/components/schemas/SearchTotal'
        max_score:
          type: number
          format: float
        hits:
          type: array
          items:
            $ref: '#/components/schemas/DocumentHit'
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/Aggregation'
      additionalProperties: false
    DocumentHit:
      required:
      - _id
      - document
      - score
      type: object
      properties:
        score:
          type: number
          format: float
        _id:
          type: string
        document:
          $ref: '#/components/schemas/Document'
      additionalProperties: false
    DocumentArray:
      type: array
      items:
        $ref: '#/components/schemas/Document'
    ProjectConfigCreation:
      type: object
      properties:
        label:
          type: string
        lang:
          type: string
          default: en
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        imageId:
          type: string
        imageFilename:
          type: string
        metafacets:
          type: string
        nature:
          type: string
          default: sequence_labelling
        properties:
          type: object
      additionalProperties: false
    ProjectStatus:
      required:
      - projectName
      - status
      type: object
      properties:
        projectName:
          type: string
        status:
          type: string
        pendingJob:
          $ref: '#/components/schemas/SherpaJobBean'
      additionalProperties: false
    SherpaJobBeanArray:
      type: array
      items:
        $ref: '#/components/schemas/SherpaJobBean'
    ProjectBeanArray:
      type: array
      items:
        $ref: '#/components/schemas/ProjectBean'
    ProjectStatusArray:
      type: array
      items:
        $ref: '#/components/schemas/ProjectStatus'
    NewExperiment:
      required:
      - engine
      - label
      - parameters
      type: object
      properties:
        engine:
          type: string
        label:
          type: string
        parameters:
          type: object
      additionalProperties: false
    Experiment:
      required:
      - duration
      - engine
      - label
      - models
      - name
      - parameters
      - quality
      - running
      - timestamp
      - uptodate
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        engine:
          type: string
        favorite:
          type: boolean
        running:
          type: boolean
        quality:
          type: integer
          format: int32
        timestamp:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        uptodate:
          type: boolean
        models:
          type: integer
          format: int32
        parameters:
          type: object
        report:
          $ref: '#/components/schemas/Report'
      additionalProperties: false
    ExperimentPatch:
      type: object
      properties:
        label:
          type: string
        favorite:
          type: boolean
        parameters:
          type: object
      additionalProperties: false
    ExperimentArray:
      type: array
      items:
        $ref: '#/components/schemas/Experiment'
    NewRole:
      required:
      - label
      - permissions
      type: object
      properties:
        label:
          type: string
        permissions:
          type: array
          items:
            type: string
      additionalProperties: false
    RoleDesc:
      required:
      - label
      - permissions
      - rolename
      - type
      type: object
      properties:
        rolename:
          type: string
        label:
          type: string
        permissions:
          type: array
          items:
            type: string
        type:
          type: string
        groupName:
          type: string
        predefined:
          type: boolean
        createdAt:
          type: string
        createdBy:
          type: string
        modifiedBy:
          type: string
        modifiedAt:
          type: string
      additionalProperties: false
    RoleUpdate:
      type: object
      properties:
        label:
          type: string
        permissions:
          type: array
          items:
            type: string
      additionalProperties: false
    RoleDescArray:
      type: array
      items:
        $ref: '#/components/schemas/RoleDesc'
    NewGroupDesc:
      required:
      - label
      type: object
      properties:
        label:
          type: string
        maxUsers:
          type: integer
          format: int32
        attachedRoles:
          type: array
          items:
            type: string
      additionalProperties: false
    GroupName:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
    DeleteGroupResult:
      required:
      - removedProjects
      - removedUsers
      type: object
      properties:
        removedUsers:
          type: integer
          format: int32
        removedProjects:
          type: integer
          format: int32
      additionalProperties: false
    GroupDesc:
      required:
      - label
      - maxUsers
      - name
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        maxUsers:
          type: integer
          format: int32
        createdBy:
          type: string
        createdAt:
          type: string
        modifiedBy:
          type: string
        modifiedAt:
          type: string
        attachedRoles:
          type: array
          items:
            type: string
      additionalProperties: false
    GroupPatch:
      type: object
      properties:
        label:
          type: string
        maxUsers:
          type: integer
          format: int32
        attachedRoles:
          type: array
          items:
            type: string
      additionalProperties: false
    GroupDescArray:
      type: array
      items:
        $ref: '#/components/schemas/GroupDesc'
    PartialLabel:
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        color:
          type: string
        identifier:
          type: string
      additionalProperties: false
    Label:
      required:
      - color
      - label
      - name
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        color:
          type: string
        identifier:
          type: string
        count:
          type: integer
          format: int32
      additionalProperties: false
    LabelUpdate:
      type: object
      properties:
        label:
          type: string
        color:
          type: string
        identifier:
          type: string
      additionalProperties: false
    LabelArray:
      type: array
      items:
        $ref: '#/components/schemas/Label'
    NewGazetteer:
      required:
      - engine
      - label
      - parameters
      type: object
      properties:
        engine:
          type: string
        label:
          type: string
        parameters:
          type: object
      additionalProperties: false
    Gazetteer:
      required:
      - duration
      - engine
      - label
      - models
      - name
      - parameters
      - running
      - timestamp
      - uptodate
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        engine:
          type: string
        running:
          type: boolean
        timestamp:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        uptodate:
          type: boolean
        models:
          type: integer
          format: int32
        parameters:
          type: object
      additionalProperties: false
    GazetteerPatch:
      type: object
      properties:
        label:
          type: string
        parameters:
          type: object
      additionalProperties: false
    GazetteerArray:
      type: array
      items:
        $ref: '#/components/schemas/Gazetteer'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic
